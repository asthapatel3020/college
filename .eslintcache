[{"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/App.test.js":"1","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/App.tsx":"2","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/auth.ts":"3","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/BasePage.tsx":"4","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/Content.tsx":"5","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/Main.tsx":"6","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/SideBar.tsx":"7","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/TopBar.tsx":"8","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/AccountSetting/AccountSettingTabPanel.tsx":"9","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/AutoHideSnakBar.tsx":"10","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/BasicForm.tsx":"11","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/CampusMenu.tsx":"12","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/CancelButton.tsx":"13","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Container.tsx":"14","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/CreateButton.tsx":"15","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/DropDownMenu.tsx":"16","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Input.tsx":"17","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/InputCheckBox.tsx":"18","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/InputDatePicker.tsx":"19","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Login/Footer.tsx":"20","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Modal.tsx":"21","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Navigation.tsx":"22","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/SearchField.tsx":"23","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/SubmitButton.tsx":"24","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Unitization/NewCourseModal.tsx":"25","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Unitization/utils.ts":"26","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/config/apolloConfig.ts":"27","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/config/authConfig.ts":"28","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/config/tokenConfig.ts":"29","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/contexts.tsx":"30","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/graphql/client.ts":"31","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/index.js":"32","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/AccountSetting/PasswordSettings.tsx":"33","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/AccountSetting/PersonalDetails.tsx":"34","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/AccountSetting/ProfilePicEdit.tsx":"35","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/AccountSetting/index.tsx":"36","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/AccountSetting/utils.ts":"37","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/CreateUser.tsx":"38","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/ForgotPassword/ForgotPassword.tsx":"39","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/ForgotPassword/utils.ts":"40","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/Login/NewPassword.tsx":"41","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/Login/index.tsx":"42","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/Login/utils.ts":"43","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/ResetPassword/ResetPassword.tsx":"44","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/ResetPassword/utils.ts":"45","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/SelectCampus/index.tsx":"46","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/Unitization/index.tsx":"47","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/react-app-env.d.ts":"48","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/reportWebVitals.js":"49","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/setupTests.js":"50","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/utils/a11y.tsx":"51","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/utils/authenticator.ts":"52","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/utils/feedback.ts":"53","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/utils/passwordInstruction.tsx":"54","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/utils/unitizationdata.ts":"55","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/Unitization/Courses.tsx":"56","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/Unitization/Unit.tsx":"57","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Unitization/SummaryTabPanel.tsx":"58","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/Unitization/Schedule.tsx":"59","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Unitization/Schedule/DateRange.tsx":"60","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/utils/icon.tsx":"61","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/EditButton.tsx":"62","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Table.tsx":"63","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Unitization/Schedule/SelectDateModal.tsx":"64","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Unitization/Schedule/GenerateSchedule.tsx":"65","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Unitization/Schedule/WarningModal.tsx":"66"},{"size":266,"mtime":1607331849749,"results":"67","hashOfConfig":"68"},{"size":6368,"mtime":1607421865433,"results":"69","hashOfConfig":"68"},{"size":1802,"mtime":1607336105454,"results":"70","hashOfConfig":"68"},{"size":1677,"mtime":1607331673307,"results":"71","hashOfConfig":"68"},{"size":746,"mtime":1607416652144,"results":"72","hashOfConfig":"68"},{"size":3004,"mtime":1607421923730,"results":"73","hashOfConfig":"68"},{"size":1877,"mtime":1607331892304,"results":"74","hashOfConfig":"68"},{"size":3692,"mtime":1607331673306,"results":"75","hashOfConfig":"68"},{"size":582,"mtime":1606908292063,"results":"76","hashOfConfig":"68"},{"size":1051,"mtime":1606908279643,"results":"77","hashOfConfig":"68"},{"size":586,"mtime":1607331931992,"results":"78","hashOfConfig":"68"},{"size":6068,"mtime":1607332026963,"results":"79","hashOfConfig":"68"},{"size":902,"mtime":1607419803951,"results":"80","hashOfConfig":"68"},{"size":426,"mtime":1607421910645,"results":"81","hashOfConfig":"68"},{"size":931,"mtime":1607406462486,"results":"82","hashOfConfig":"68"},{"size":4320,"mtime":1607331673306,"results":"83","hashOfConfig":"68"},{"size":3329,"mtime":1607332085672,"results":"84","hashOfConfig":"68"},{"size":1279,"mtime":1607331673306,"results":"85","hashOfConfig":"68"},{"size":3072,"mtime":1607424546022,"results":"86","hashOfConfig":"68"},{"size":1039,"mtime":1607331673306,"results":"87","hashOfConfig":"68"},{"size":1437,"mtime":1607424127460,"results":"88","hashOfConfig":"68"},{"size":6016,"mtime":1607331673306,"results":"89","hashOfConfig":"68"},{"size":1739,"mtime":1607332099186,"results":"90","hashOfConfig":"68"},{"size":1113,"mtime":1607507427303,"results":"91","hashOfConfig":"68"},{"size":11208,"mtime":1607424530182,"results":"92","hashOfConfig":"68"},{"size":565,"mtime":1607331673306,"results":"93","hashOfConfig":"68"},{"size":84,"mtime":1607331673307,"results":"94","hashOfConfig":"68"},{"size":1312,"mtime":1607331673306,"results":"95","hashOfConfig":"68"},{"size":849,"mtime":1607331673306,"results":"96","hashOfConfig":"68"},{"size":159,"mtime":1606908279656,"results":"97","hashOfConfig":"68"},{"size":1015,"mtime":1607337661187,"results":"98","hashOfConfig":"68"},{"size":493,"mtime":1607331673306,"results":"99","hashOfConfig":"68"},{"size":6654,"mtime":1607419780424,"results":"100","hashOfConfig":"68"},{"size":6947,"mtime":1607419792529,"results":"101","hashOfConfig":"68"},{"size":1808,"mtime":1607332376830,"results":"102","hashOfConfig":"68"},{"size":7603,"mtime":1607332454674,"results":"103","hashOfConfig":"68"},{"size":605,"mtime":1607331673306,"results":"104","hashOfConfig":"68"},{"size":2453,"mtime":1607335463273,"results":"105","hashOfConfig":"68"},{"size":3466,"mtime":1607332527980,"results":"106","hashOfConfig":"68"},{"size":247,"mtime":1607331673306,"results":"107","hashOfConfig":"68"},{"size":5552,"mtime":1607332552663,"results":"108","hashOfConfig":"68"},{"size":4306,"mtime":1607331673306,"results":"109","hashOfConfig":"68"},{"size":791,"mtime":1607331673306,"results":"110","hashOfConfig":"68"},{"size":6542,"mtime":1607332569659,"results":"111","hashOfConfig":"68"},{"size":342,"mtime":1607331673306,"results":"112","hashOfConfig":"68"},{"size":2979,"mtime":1607336062735,"results":"113","hashOfConfig":"68"},{"size":529,"mtime":1607339488095,"results":"114","hashOfConfig":"68"},{"size":40,"mtime":1604913741972,"results":"115","hashOfConfig":"68"},{"size":356,"mtime":1607331673307,"results":"116","hashOfConfig":"68"},{"size":240,"mtime":1607331673307,"results":"117","hashOfConfig":"68"},{"size":251,"mtime":1606908292082,"results":"118","hashOfConfig":"68"},{"size":484,"mtime":1607331673307,"results":"119","hashOfConfig":"68"},{"size":340,"mtime":1606908279670,"results":"120","hashOfConfig":"68"},{"size":1965,"mtime":1607332627809,"results":"121","hashOfConfig":"68"},{"size":4374,"mtime":1607422101941,"results":"122","hashOfConfig":"68"},{"size":5809,"mtime":1607499807704,"results":"123","hashOfConfig":"68"},{"size":2301,"mtime":1607402283455,"results":"124","hashOfConfig":"68"},{"size":561,"mtime":1607339706223,"results":"125","hashOfConfig":"68"},{"size":14872,"mtime":1607662097574,"results":"126","hashOfConfig":"68"},{"size":1020,"mtime":1607418501471,"results":"127","hashOfConfig":"68"},{"size":8531,"mtime":1607588202187,"results":"128","hashOfConfig":"68"},{"size":1186,"mtime":1607504738734,"results":"129","hashOfConfig":"68"},{"size":3659,"mtime":1607652470739,"results":"130","hashOfConfig":"68"},{"size":2505,"mtime":1607423182576,"results":"131","hashOfConfig":"68"},{"size":2002,"mtime":1607425364444,"results":"132","hashOfConfig":"68"},{"size":1725,"mtime":1607425508373,"results":"133","hashOfConfig":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"109umgg",{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/App.test.js",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/App.tsx",["287","288"],"import React, { useEffect, useState } from 'react'\nimport { GoogleReCaptchaProvider } from 'react-google-recaptcha-v3'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { BrowserRouter as Router, Route, Switch, useHistory } from 'react-router-dom'\nimport './App.css'\nimport { Main } from './components/Main'\nimport { client } from './graphql/client'\nimport { CurrentUserContext } from './contexts'\nimport { Login } from './pages/Login'\nimport { CurrentUser, extractCurrentUser, NULL_USER } from './auth'\nimport Amplify, { Auth } from 'aws-amplify'\nimport { CognitoUser } from 'amazon-cognito-identity-js'\nimport { authConfig } from './config/authConfig'\nimport { ForgotPassword } from './pages/ForgotPassword/ForgotPassword'\nimport { ResetPassword } from './pages/ResetPassword/ResetPassword'\nimport CreateUser from './pages/CreateUser'\nimport configFile from './config/tokenConfig'\nimport axios from 'axios'\nimport { NewPassword } from './pages/Login/NewPassword'\n\nAmplify.configure({\n  Auth: authConfig\n})\n\nexport const AppContainer = () => {\n  const [currentUser, setCurrentUser] = useState<CurrentUser>(NULL_USER)\n  const [errorMessage, setErrorMessage] = useState<string | null>(null)\n  const [isLoading, setLoading] = useState<boolean>(false)\n  const history = useHistory()\n\n  const handleCognitoUser = async (user: CognitoUser | null) => {\n    try {\n      if (localStorage.getItem('isAuth') === 'true') {\n        setCurrentUser({ loggedIn: true })\n      }\n      if (user) {\n        setLoading(false)\n        const currentUser = await extractCurrentUser(user)\n        if (currentUser.resetPasswordFlag && currentUser.resetPasswordFlag === 'true') {\n          history.push('./newpassword')\n          setCurrentUser({ loggedIn: true })\n          setCurrentUser(currentUser)\n          localStorage.setItem('isAuth', 'true')\n        } else {\n          if ((currentUser.campusid && currentUser.campusid.length === 0) || localStorage.getItem('campusID')) {\n            setCurrentUser({ loggedIn: true })\n            setCurrentUser(currentUser)\n            history.push('./unitization')\n          } else {\n            setCurrentUser({ loggedIn: true })\n            setCurrentUser(currentUser)\n            history.push('./campus')\n          }\n\n          // history.push('./')\n        }\n      } else {\n        setCurrentUser(NULL_USER)\n      }\n      setErrorMessage(null)\n    } catch (error) {\n      localStorage.setItem('isAuth', 'false')\n      setCurrentUser(NULL_USER)\n      setErrorMessage('Email not found or not active')\n    }\n    setLoading(false)\n  }\n\n  const handleError = (error: Error) => {\n    error && setErrorMessage(error.message)\n    setLoading(false)\n  }\n\n  const signIn = (username: string, password: string) => {\n    const emptyField = !username.trim() ? 'Email' : !password.trim() ? 'Password' : ''\n    if (!emptyField) {\n      setLoading(true)\n      Auth.signIn({ username, password })\n        .then((user) => {\n          localStorage.setItem('fpassword', password)\n          handleCognitoUser(user)\n        })\n        .catch(handleError)\n    } else {\n      setErrorMessage(`${emptyField} cannot be empty`)\n    }\n  }\n\n  useEffect(() => {\n    if (!window.location.hash) {\n      Auth.currentAuthenticatedUser()\n        .then(handleCognitoUser)\n        .catch(() => {\n          setLoading(false)\n          setErrorMessage(null) //When No Current User, we don't show the error\n          const isErrorAuth = localStorage.getItem('isErrorAuth') === 'true'\n          if (isErrorAuth) {\n            setErrorMessage('Email not found or not active')\n            localStorage.setItem('isErrorAuth', 'false')\n          }\n        })\n    }\n\n    const body = new URLSearchParams()\n    body.set('grant_type', configFile.grantType)\n    body.set('scope', configFile.scope)\n    axios\n      .post(configFile.url, body.toString(), {\n        headers: {\n          Authorization: configFile.authorization,\n          'Content-Type': configFile.contentType\n        }\n      })\n      .then((response) => {\n        localStorage.setItem('accessToken', response.data.access_token)\n      })\n    // eslint-disable-next-line\n  }, []);\n\n  const signOut = () => {\n    setLoading(true)\n    Auth.signOut()\n      .then(() => {\n        history.push('/')\n        localStorage.clear()\n        handleCognitoUser(null)\n      })\n      .catch(() => {\n        setLoading(false)\n        setErrorMessage(null)\n      })\n  }\n\n  const completeNewPassword = (username: string, newPassword: string) => {\n    console.log(username)\n    const fpswd = localStorage.getItem('fpassword')\n    Auth.currentAuthenticatedUser()\n      .then((user) => {\n        console.log(user)\n        console.log(fpswd)\n        Auth.changePassword(user, fpswd ? fpswd : '', newPassword).then(() => {\n          Auth.updateUserAttributes(user, {\n            'custom:resetPasswordFlag': 'false'\n          }).then((asuser) => {\n            if (asuser) handleCognitoUser(user)\n          })\n        })\n      })\n      .catch(() => {\n        console.log('Error')\n      })\n  }\n\n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n      <Switch>\n        <Route path=\"/createUser\" component={CreateUser} />\n        {/* <Main/> */}\n        {currentUser.loggedIn ? (\n          <>\n            <Main {...{ signOut }} />\n            <Route\n              path=\"/newpassword\"\n              render={() => <NewPassword {...{ completeNewPassword, isLoading }}></NewPassword>}\n            />\n          </>\n        ) : (\n          <>\n            <Route path=\"/\" render={() => <Login {...{ errorMessage, signIn, isLoading }} />} />\n            <Route path=\"/forgotpassword\" component={ForgotPassword} />\n            <Route path=\"/resetpassword\" component={ResetPassword} />\n          </>\n        )}\n      </Switch>\n    </CurrentUserContext.Provider>\n  )\n}\n\nexport const App = () => (\n  <GoogleReCaptchaProvider\n    reCaptchaKey=\"6Lebg-wZAAAAAO5YZCnm8qJCT1nF4-otZfRDX-r7\"\n    useRecaptchaNet={true}\n    scriptProps={{\n      async: false, // optional, default to false,\n      defer: false, // optional, default to false\n      appendTo: 'head', // optional, default to \"head\", can be \"head\" or \"body\",\n      nonce: undefined // optional, default undefined\n    }}\n  >\n    <Router>\n      <ApolloProvider client={client}>\n        <AppContainer />\n      </ApolloProvider>\n    </Router>\n  </GoogleReCaptchaProvider>\n)\n\nexport default App\n","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/auth.ts",["289"],"import { CognitoUser, CognitoUserAttribute } from 'amazon-cognito-identity-js'\n\nexport interface CurrentUser {\n  email?: string\n  username?: string\n  phoneNumber?: string\n  role?: string[]\n  loggedIn: boolean\n  fname?: string\n  lname?: string\n  campusid?: string[]\n  resetPasswordFlag?: string\n}\n\nexport const NULL_USER = { loggedIn: false }\n\nconst findUserAttribute = (attributes: CognitoUserAttribute[]) => (key: string) =>\n  // attributes?.find(value => console.log(value.getName()))\n  attributes?.find((value) => value.getName() === key)?.getValue()\n\nexport const extractCurrentUser = (cognitoUser: CognitoUser) =>\n  new Promise<CurrentUser>((resolve, reject) => {\n    cognitoUser.getUserAttributes((err?: Error, result?: CognitoUserAttribute[]) => {\n      if (err) {\n        reject(err)\n      } else {\n        if (result) {\n          const finder = findUserAttribute(result)\n          // console.log(finder)\n          const email = finder('email')\n          const username = finder('username')\n          const phoneNumber = finder('phone_number')\n          const fname = finder('custom:firstName')\n          const lname = finder('custom:lastName')\n          const role = finder('custom:role')?.split('|')\n          const campusid = finder('custom:campusId')?.split('|')\n          const resetPasswordFlag = finder('custom:resetPasswordFlag')\n          // const phoneNumber = finder('custom:OrganizationId')\n          // const phoneNumber = finder('custom:CampusId')\n          resolve({\n            loggedIn: true,\n            email,\n            phoneNumber,\n            role,\n            fname,\n            lname,\n            campusid,\n            resetPasswordFlag,\n            username\n          })\n        } else {\n          reject(new Error('No user attributes'))\n        }\n      }\n    })\n  })\n","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/BasePage.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/Content.tsx",["290"],"import React, { useContext } from 'react'\nimport { Route } from 'react-router-dom'\nimport { Container } from './common/Container'\nimport Unitization from '../pages/Unitization'\nimport { AccountSettings } from '../pages/AccountSetting'\nimport { SelectCampus } from '../pages/SelectCampus'\nimport { CurrentUserContext } from '../contexts'\n\nexport const Content = () => {\n  const currentUser = useContext(CurrentUserContext)\n\n  return (\n    <Container>\n      <Route path=\"/accountSettings\" component={AccountSettings} />\n      <Route\n        path=\"/campus\"\n        render={() => <SelectCampus campusId={currentUser.campusid ? currentUser.campusid : []} />}\n      />\n      <Route path=\"/unitization\" component={Unitization} />\n    </Container>\n  )\n}\n","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/Main.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/SideBar.tsx",["291"],"import React from 'react'\nimport { Navigation } from './common/Navigation'\nimport { Box, makeStyles } from '@material-ui/core'\n\nconst useStyles = makeStyles(() => ({\n  box: {\n    flex: 1,\n    height: '100%',\n    borderColor: '#E5E5E5',\n    flexDirection: 'column',\n    backgroundColor: '#3B3A3C',\n    '& ul': {\n      display: 'flex',\n      flexDirection: 'column',\n      padding: 0,\n      height: '100%',\n      marginTop: '20%',\n      '& a': {\n        color: 'black',\n        // fontWeight: '',\n        opacity: 1,\n        textDecoration: 'none',\n        textTransform: 'capitalize'\n      },\n      '& .MuiListItem-root': {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'flex-start',\n        fontSize: 16,\n        boxPack: 'end',\n        justifyContent: 'flex-start',\n        padding: '18px 25px',\n        opacity: 0.8,\n        fontFamily: 'Merriweather',\n        color: '#FFFFFF'\n        // '&:hover': {\n        //   opacity: 1\n        // }\n      },\n      '& .active': {\n        backgroundColor: 'rgb(62 193 211 / 0.4)',\n        // opacity:0.8,\n        borderRadius: '0px 30px 30px 0px',\n        marginRight: 15,\n        '&::before': {\n          content: 'close-quote',\n          position: 'absolute',\n          backgroundColor: '#3EC1D3',\n          height: 75,\n          width: 10,\n          left: 0\n          // marginRight: 4,\n        },\n        '& .MuiListItem-root': {\n          // backgroundColor: theme.palette.secondary.main,\n          // borderRadius: '0 6px 6px 0',\n          // // paddingRight: '3.75rem',\n          // opacity: 1,\n          // transform: 'translate(0.75rem)'\n        }\n      }\n    }\n  }\n}))\n\nexport const SideBar = () => {\n  const classes = useStyles()\n\n  return (\n    // <Hidden mdDown>\n    <Box className={classes.box} borderRight={1} borderColor={'#E5E5E5'}>\n      <Navigation />\n    </Box>\n    // </Hidden>\n  )\n}\n","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/TopBar.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/AccountSetting/AccountSettingTabPanel.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/AutoHideSnakBar.tsx",["292"],"import React from 'react'\nimport { Snackbar, IconButton } from '@material-ui/core'\nimport CloseIcon from '@material-ui/icons/Close'\nimport MuiAlert, { Color } from '@material-ui/lab/Alert'\n\ninterface AutoHideSnackBarProps {\n  autoHideDuration?: number\n  key?: string\n  handleClose: () => void\n  message?: string\n  open: boolean\n  severity?: Color\n}\nexport const AutoHideSnackBar = ({\n  autoHideDuration = 5000,\n  key,\n  handleClose,\n  message,\n  open,\n  severity\n}: AutoHideSnackBarProps) => {\n  return (\n    <Snackbar\n      key={key}\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'left'\n      }}\n      open={open}\n      autoHideDuration={autoHideDuration}\n      onClose={handleClose}\n      action={\n        <>\n          <IconButton aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n            <CloseIcon />\n          </IconButton>\n        </>\n      }\n    >\n      <MuiAlert onClose={handleClose} severity={severity} variant={severity ? 'filled' : 'standard'}>\n        {message}\n      </MuiAlert>\n    </Snackbar>\n  )\n}\n","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/BasicForm.tsx",["293","294"],"/* eslint-disable @typescript-eslint/ban-types */\nimport React, { FC } from 'react'\nimport { Formik, FormikHelpers } from 'formik'\n\ninterface BasicFormProps {\n  initialValues: Object\n  validationSchema: any\n  onSubmit: ((values: Object, formikHelpers: FormikHelpers<Object>) => void | Promise<any>) & ((values: Object) => void)\n}\n\nexport const BasicForm: FC<BasicFormProps> = ({ initialValues, validationSchema, children, onSubmit }) => {\n  return (\n    <Formik onSubmit={onSubmit} initialValues={initialValues} validationSchema={validationSchema}>\n      {children}\n    </Formik>\n  )\n}\n","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/CampusMenu.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/CancelButton.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Container.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/CreateButton.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/DropDownMenu.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Input.tsx",["295"],"import React from 'react'\nimport {\n  Grid,\n  FormControl,\n  TextField,\n  GridSize,\n  BaseTextFieldProps,\n  OutlinedTextFieldProps,\n  InputAdornment,\n  FormHelperText,\n  makeStyles\n} from '@material-ui/core'\n\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints'\n\nconst useStyles = makeStyles(() => ({\n  margin: {\n    '& .MuiOutlinedInput-root': {\n      borderRadius: 15,\n      '& .MuiOutlinedInput-input': {\n        padding: '12.5px 14px',\n        fontFamily: 'Lato',\n        color: '#3B3A3C',\n        fontSize: 16\n      },\n      '& .Mui-disabled': {\n        fontFamily: 'Lato',\n        color: '#3B3A3C',\n        fontSize: 16\n      }\n    }\n  },\n  label: {\n    fontFamily: 'Lato-Light',\n    fontSize: 16,\n    color: '#607D8B',\n    fontWeight: 500\n  },\n  asterik: {\n    marginLeft: 5,\n    color: '#3EC1D3'\n  }\n}))\n\ninterface CustomInputProps extends BaseTextFieldProps {\n  textFieldBreakpoints?: Partial<Record<Breakpoint, boolean | GridSize>>\n  titleBreakpoints?: Partial<Record<Breakpoint, boolean | GridSize>>\n  adornment?: React.ReactNode\n  adornmentPosition?: 'start' | 'end'\n}\nexport type InputProps = CustomInputProps & Omit<OutlinedTextFieldProps, 'variant'>\nexport const Input = ({\n  autoComplete,\n  disabled,\n  fullWidth,\n  id,\n  inputProps,\n  placeholder,\n  name,\n  onBlur,\n  onChange,\n  textFieldBreakpoints,\n  title,\n  titleBreakpoints,\n  type,\n  value,\n  error,\n  helperText,\n  adornment,\n  rows,\n  multiline = false,\n  required = false,\n  adornmentPosition = 'end'\n}: InputProps) => {\n  const classes = useStyles()\n  return (\n    <>\n      {title ? (\n        <Grid item {...titleBreakpoints} style={{ marginLeft: 6, marginBottom: 5 }}>\n          <FormControl style={{ alignItems: 'center', flexDirection: 'row' }}>\n            <FormHelperText id=\"filled-weight-helper-text\" className={classes.label}>\n              {title}\n            </FormHelperText>\n            {required && <span className={classes.asterik}>&#42;</span>}\n            {/* <Typography variant=\"subtitle2\" style={{fontFamily:\"Lato-Light\", fontSize:18, color:\"#607D8B\"}}>{title}</Typography> */}\n          </FormControl>\n        </Grid>\n      ) : null}\n      <Grid item {...textFieldBreakpoints}>\n        <FormControl fullWidth={fullWidth}>\n          <TextField\n            className={classes.margin}\n            required={required}\n            placeholder={placeholder}\n            autoComplete={autoComplete}\n            disabled={disabled}\n            id={id}\n            name={name}\n            onBlur={onBlur}\n            onChange={onChange}\n            type={type}\n            value={value}\n            variant=\"outlined\"\n            rows={rows}\n            error={error}\n            multiline={multiline}\n            helperText={helperText}\n            inputProps={inputProps}\n            InputProps={{\n              type: type,\n              endAdornment:\n                adornment && adornmentPosition === 'end' ? (\n                  <InputAdornment position={adornmentPosition}>{adornment}</InputAdornment>\n                ) : null,\n              startAdornment:\n                adornment && adornmentPosition === 'start' ? (\n                  <InputAdornment position={adornmentPosition}>{adornment}</InputAdornment>\n                ) : null\n            }}\n          />\n        </FormControl>\n      </Grid>\n    </>\n  )\n}\n","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/InputCheckBox.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/InputDatePicker.tsx",["296"],"import 'date-fns'\nimport parse from 'date-fns/parse'\nimport React, { FC } from 'react'\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers'\nimport DateFnsUtils from '@date-io/date-fns'\nimport { createMuiTheme, FormControl, FormHelperText, Grid, makeStyles, MuiThemeProvider } from '@material-ui/core'\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft'\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight'\n\ninterface InputDatePickerProps {\n  selectedDate: string\n  onHandleDateChange: (date: any) => void\n  title: string\n  placeholder: string\n  required?: boolean\n}\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#3EC1D3',\n      light: '#3EC1D3',\n      dark: '#3EC1D3'\n    },\n    secondary: {\n      main: '#3EC1D3  '\n    }\n  }\n})\n\nconst useStyles = makeStyles(() => ({\n  container: {\n    '& .MuiOutlinedInput-root': {\n      // borderRadius: 15,\n      '& .MuiOutlinedInput-input': {\n        padding: '12.5px 14px'\n      },\n      '& .MuiInputAdornment-root': {\n        marginRight: 0,\n        '& .MuiButtonBase-root': {\n          padding: 0\n        }\n      }\n    },\n    '.MuiPaper-rounded': {\n      borderRadius: 10,\n      '.MuiPickersDay-daySelected': {\n        background: '#3EC1D3'\n      }\n    }\n  },\n  label: {\n    fontFamily: 'Lato-Light',\n    fontSize: 16,\n    color: '#607D8B',\n    fontWeight: 500\n  },\n  asterik: {\n    marginLeft: 5,\n    color: '#3EC1D3'\n  }\n}))\n\nexport const InputDatePicker: FC<InputDatePickerProps> = ({\n  selectedDate,\n  onHandleDateChange,\n  title,\n  placeholder,\n  required\n}) => {\n  const classes = useStyles()\n  return (\n    <>\n      {title ? (\n        <Grid item style={{ marginLeft: 6, marginBottom: 5 }}>\n          <FormControl style={{ alignItems: 'center', flexDirection: 'row' }}>\n            <FormHelperText id=\"filled-weight-helper-text\" className={classes.label}>\n              {title}\n            </FormHelperText>\n            {required && <span className={classes.asterik}>&#42;</span>}\n            {/* <Typography variant=\"subtitle2\" style={{fontFamily:\"Lato-Light\", fontSize:18, color:\"#607D8B\"}}>{title}</Typography> */}\n          </FormControl>\n        </Grid>\n      ) : null}\n      <MuiThemeProvider theme={theme}>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <KeyboardDatePicker\n            autoOk\n            // disableFuture\n            className={classes.container}\n            disableToolbar\n            variant=\"inline\"\n            leftArrowIcon={<KeyboardArrowLeft />}\n            rightArrowIcon={<KeyboardArrowRight />}\n            inputVariant=\"outlined\"\n            // label=\"With keyboard\"\n            placeholder={placeholder}\n            format=\"dd/MM/yyyy\"\n            value={selectedDate && parse(selectedDate, 'dd/MM/yyyy', new Date())}\n            InputProps={{ style: { borderRadius: 10 } }}\n            InputAdornmentProps={{ position: 'start', color: '#B0BEC5' }}\n            onChange={onHandleDateChange}\n          />\n        </MuiPickersUtilsProvider>\n      </MuiThemeProvider>\n    </>\n  )\n}\n","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Login/Footer.tsx",["297"],"import React, { Component } from 'react'\nimport styled from 'styled-components'\n\nconst FooterContainer = styled.div`\n  text-align: center;\n  position: absolute;\n  bottom: 0;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  width: 100% !important;\n  height: 50px !important ;\n  background: #eceff1;\n  align-items: center;\n`\n\nconst FooterButton = styled.button`\n  border: none;\n  margin: 20px;\n`\n\nexport class Footer extends Component {\n  render() {\n    return (\n      <FooterContainer>\n        <div style={{ margin: 20 }}>\n          <span className=\"copyRight\">©2020 - Solvitude Pty. Ltd. All Rights Reserved</span>\n        </div>\n        <div style={{ margin: 20 }}>\n          <FooterButton className=\"copyRight\">Legal</FooterButton>\n          <FooterButton className=\"copyRight\">Contact Us</FooterButton>\n          <FooterButton className=\"copyRight\">Help Center</FooterButton>\n          <FooterButton className=\"copyRight\">Terms & Conditions</FooterButton>\n        </div>\n      </FooterContainer>\n    )\n  }\n}\n","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Modal.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Navigation.tsx",["298"],"import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { List, ListItem, SvgIcon, SvgIconProps } from '@material-ui/core'\n\nfunction CourseIcon(props: SvgIconProps) {\n  return (\n    <SvgIcon {...props}>\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M8.07692 0H6.92308C6.28615 0 5.76923 0.504 5.76923 1.125V16.875C5.76923 17.496 6.28615 18 6.92308 18H8.07692C8.71385 18 9.23077 17.496 9.23077 16.875V1.125C9.23077 0.504 8.71385 0 8.07692 0ZM13.8462 9H12.6923C12.0554 9 11.5385 9.504 11.5385 10.125V16.875C11.5385 17.496 12.0554 18 12.6923 18H13.8462C14.4831 18 15 17.496 15 16.875V10.125C15 9.504 14.4831 9 13.8462 9ZM2.30769 5.0625H1.15385C0.516923 5.0625 0 5.5665 0 6.1875V16.875C0 17.496 0.516923 18 1.15385 18H2.30769C2.94462 18 3.46154 17.496 3.46154 16.875V6.1875C3.46154 5.5665 2.94462 5.0625 2.30769 5.0625Z\"\n        fill=\"white\"\n      />\n    </SvgIcon>\n  )\n}\n\nfunction UnitizationIcon(props: SvgIconProps) {\n  return (\n    <SvgIcon {...props}>\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M7.875 13.5H9V14.625H7.875V13.5ZM7.875 15.75H9C9.621 15.75 10.125 15.246 10.125 14.625V13.5C10.125 12.879 9.621 12.375 9 12.375H7.875C7.254 12.375 6.75 12.879 6.75 13.5V14.625C6.75 15.246 7.254 15.75 7.875 15.75ZM3.375 13.5H4.5V14.625H3.375V13.5ZM3.375 15.75H4.5C5.121 15.75 5.625 15.246 5.625 14.625V13.5C5.625 12.879 5.121 12.375 4.5 12.375H3.375C2.754 12.375 2.25 12.879 2.25 13.5V14.625C2.25 15.246 2.754 15.75 3.375 15.75ZM7.875 9H9V10.125H7.875V9ZM7.875 11.25H9C9.621 11.25 10.125 10.746 10.125 10.125V9C10.125 8.379 9.621 7.875 9 7.875H7.875C7.254 7.875 6.75 8.379 6.75 9V10.125C6.75 10.746 7.254 11.25 7.875 11.25ZM3.375 9H4.5V10.125H3.375V9ZM3.375 11.25H4.5C5.121 11.25 5.625 10.746 5.625 10.125V9C5.625 8.379 5.121 7.875 4.5 7.875H3.375C2.754 7.875 2.25 8.379 2.25 9V10.125C2.25 10.746 2.754 11.25 3.375 11.25ZM15.75 4.5H1.125V3.375C1.125 2.754 1.629 2.25 2.25 2.25H4.5V2.8125C4.5 3.12356 4.75144 3.375 5.0625 3.375C5.37356 3.375 5.625 3.12356 5.625 2.8125V2.25H11.25V2.8125C11.25 3.12356 11.5014 3.375 11.8125 3.375C12.1236 3.375 12.375 3.12356 12.375 2.8125V2.25H14.625C15.246 2.25 15.75 2.754 15.75 3.375V4.5ZM15.75 15.75C15.75 16.371 15.246 16.875 14.625 16.875H2.25C1.629 16.875 1.125 16.371 1.125 15.75V5.625H15.75V15.75ZM14.625 1.125H12.375V0.5625C12.375 0.252 12.1236 0 11.8125 0C11.5014 0 11.25 0.252 11.25 0.5625V1.125H5.625V0.5625C5.625 0.252 5.37356 0 5.0625 0C4.75144 0 4.5 0.252 4.5 0.5625V1.125H2.25C1.00744 1.125 0 2.13244 0 3.375V15.75C0 16.9926 1.00744 18 2.25 18H14.625C15.8676 18 16.875 16.9926 16.875 15.75V3.375C16.875 2.13244 15.8676 1.125 14.625 1.125ZM12.375 9H13.5V10.125H12.375V9ZM12.375 11.25H13.5C14.121 11.25 14.625 10.746 14.625 10.125V9C14.625 8.379 14.121 7.875 13.5 7.875H12.375C11.754 7.875 11.25 8.379 11.25 9V10.125C11.25 10.746 11.754 11.25 12.375 11.25ZM12.375 13.5H13.5V14.625H12.375V13.5ZM12.375 15.75H13.5C14.121 15.75 14.625 15.246 14.625 14.625V13.5C14.625 12.879 14.121 12.375 13.5 12.375H12.375C11.754 12.375 11.25 12.879 11.25 13.5V14.625C11.25 15.246 11.754 15.75 12.375 15.75Z\"\n        fill=\"white\"\n      />\n    </SvgIcon>\n  )\n}\n\nfunction UserIcon(props: SvgIconProps) {\n  return (\n    <SvgIcon {...props}>\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M19.375 10.125H15.625C15.2794 10.125 15 10.377 15 10.6875C15 10.9986 15.2794 11.25 15.625 11.25H19.375C19.7206 11.25 20 10.9986 20 10.6875C20 10.377 19.7206 10.125 19.375 10.125ZM19.375 6.75H14.375C14.0294 6.75 13.75 7.00144 13.75 7.3125C13.75 7.62356 14.0294 7.875 14.375 7.875H19.375C19.7206 7.875 20 7.62356 20 7.3125C20 7.00144 19.7206 6.75 19.375 6.75ZM19.375 13.5H15.625C15.2794 13.5 15 13.752 15 14.0625C15 14.3736 15.2794 14.625 15.625 14.625H19.375C19.7206 14.625 20 14.3736 20 14.0625C20 13.752 19.7206 13.5 19.375 13.5ZM14.375 4.5H19.375C19.7206 4.5 20 4.24856 20 3.9375C20 3.627 19.7206 3.375 19.375 3.375H14.375C14.0294 3.375 13.75 3.627 13.75 3.9375C13.75 4.24856 14.0294 4.5 14.375 4.5ZM12.5 14.3438C12.5 15.7416 11.1263 16.875 9.43188 16.875H4.31812C2.62375 16.875 1.25 15.7416 1.25 14.3438V12.6562C1.25 11.4604 2.25812 10.4647 3.60937 10.1998C4.53125 10.8585 5.65625 11.25 6.875 11.25C8.09375 11.25 9.21875 10.8585 10.1406 10.1998C11.4919 10.4647 12.5 11.4604 12.5 12.6562V14.3438ZM2.5 5.625C2.5 3.13987 4.45875 1.125 6.875 1.125C9.29125 1.125 11.25 3.13987 11.25 5.625C11.25 8.11013 9.29125 10.125 6.875 10.125C4.45875 10.125 2.5 8.11013 2.5 5.625ZM11.2194 9.19856C12.0187 8.22656 12.5 6.98175 12.5 5.625C12.5 2.51888 9.98188 0 6.875 0C3.76812 0 1.25 2.51888 1.25 5.625C1.25 6.98175 1.73126 8.22656 2.53063 9.19856C1.06188 9.65531 0 10.8973 0 12.375V14.625C0 16.4886 1.67938 18 3.75 18H10C12.0706 18 13.75 16.4886 13.75 14.625V12.375C13.75 10.8973 12.6881 9.65531 11.2194 9.19856Z\"\n        fill=\"white\"\n      />\n    </SvgIcon>\n  )\n}\n\nconst menuItems = [\n  {\n    item: 'Course Progress',\n    path: '/courses',\n    permission: '',\n    icon: <CourseIcon style={{ fontFamily: 'Merriweather', fontSize: 20 }} />\n  },\n  {\n    item: 'Unitization',\n    path: '/unitization',\n    permission: '',\n    icon: <UnitizationIcon style={{ fontFamily: 'Merriweather', fontSize: 20 }} />\n  },\n  {\n    item: 'Users',\n    path: '/campus',\n    permission: '',\n    icon: <UserIcon style={{ fontFamily: 'Merriweather', fontSize: 20 }} />\n  }\n]\n\nexport const Navigation = () => {\n  return (\n    <List>\n      {menuItems.map((menuItem) => {\n        if (menuItem.permission === '') {\n          return (\n            <NavLink key={menuItem.item} to={menuItem.path}>\n              <ListItem button>\n                {' '}\n                {menuItem.icon}\n                {menuItem.item}\n              </ListItem>\n            </NavLink>\n          )\n        }\n        return (\n          <NavLink key={menuItem.item} to={menuItem.path}>\n            <ListItem button>\n              {menuItem.icon}\n              {menuItem.item}\n            </ListItem>\n          </NavLink>\n        )\n      })}\n    </List>\n  )\n}\n","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/SearchField.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/SubmitButton.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Unitization/NewCourseModal.tsx",["299","300","301"],"import React, { FC, useState } from 'react'\nimport { makeStyles, Grid, Typography } from '@material-ui/core'\nimport { useMutation } from '@apollo/react-hooks'\nimport { loader } from 'graphql.macro'\nimport { Modal } from '../Modal'\nimport { BasicForm } from '../BasicForm'\nimport { CourseFormValue, newCourseValidationSchema } from './utils'\nimport { Input } from '../Input'\nimport { InputDatePicker } from '../InputDatePicker'\nimport { InputCheckBox } from '../InputCheckBox'\nimport { CancelButton } from '../CancelButton'\nimport { SubmitButton } from '../SubmitButton'\nimport moment from 'moment'\nimport { AutoHideSnackBar } from '../AutoHideSnakBar'\nimport { Feedback, getSuccessFeedback, getErrorFeedback } from '../../../utils/feedback'\n\ninterface NewCourseModalProps {\n  open: boolean\n  onCloseModal: () => void\n}\n\nconst ADD_COURSES = loader('../../../graphql/common/addCourses.graphql')\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2)\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500]\n  },\n  label: {\n    fontFamily: 'Lato-Light',\n    fontSize: 16,\n    color: '#607D8B',\n    fontWeight: 500,\n    marginLeft: 5\n  },\n  asterik: {\n    marginLeft: 5,\n    color: '#3EC1D3'\n  }\n}))\n\nconst campuses = [\n  {\n    name: 'check-box-1',\n    key: 'checkBox1',\n    label: 'King St, Melbourne'\n  },\n  {\n    name: 'check-box-2',\n    key: 'checkBox2',\n    label: 'Willian St, Melbourne'\n  },\n  {\n    name: 'check-box-3',\n    key: 'checkBox3',\n    label: 'Mauritius'\n  }\n]\n\nconst initialValues: CourseFormValue = {\n  code: '',\n  campuses: [],\n  cricosCode: '',\n  duration: '',\n  endDate: moment(new Date()).format('DD/MM/yyyy'),\n  group: '',\n  name: ''\n}\n// eslint-disable-next-line no-empty-pattern\nexport const NewCourseModal: FC<NewCourseModalProps> = ({ open, onCloseModal }) => {\n  const [autoHideFeedback, setAutoHideFeedback] = useState<Feedback | null>(null)\n  const classes = useStyles()\n  const [assignCourses] = useMutation(ADD_COURSES, {\n    update(cache, result) {\n      const addCourses = result.data?.addCourses\n      if (addCourses) {\n      }\n    }\n  })\n\n  const handleSubmit = (values: any) => {\n    /** GraphQLi Example Query\n     * mutation{\n     *     createCourse(\n     *       courseCode:\"BSBADM322\",\n     *       cricosCode:\"BSBADM323\",\n     *       courseName:\"Advance Web Dev\",\n     *       courseEndDate:\"22/12/2020\",\n     *       campusList:[\"78286468-22e1-4ffa-be2b-8011a5c1b714\"],\n     *       courseGroup:\"Lorem\",\n     *       courseHours:\"30\"\n     *     ){\n     *       courseId,\n     *       courseName\n     *     }\n     *   }\n     */\n\n    assignCourses({\n      variables: {\n        // campusId: '78286468-22e1-4ffa-be2b-8011a5c1b714',\n        // courseId: 'ff04a430-343f-4f99-9fa5-1133929da11b',\n        campusList: ['78286468-22e1-4ffa-be2b-8011a5c1b714'],\n        courseCode: values.code,\n        cricosCode: values.cricosCode,\n        courseName: values.name,\n        courseEndDate: values.endDate,\n        courseHours: values.duration,\n        courseGroup: values.group\n        // status: 'Active',\n      }\n    })\n      .then(({ data }) => {\n        console.log(`NEW COURSE DATA`, data)\n        setAutoHideFeedback(getSuccessFeedback('Course Added Successfully!'))\n        onCloseModal()\n      })\n      .catch((error) => {\n        console.log(error)\n        setAutoHideFeedback(getErrorFeedback(error.message))\n      })\n  }\n\n  return (\n    <>\n      <Modal open={open} onCloseModal={onCloseModal} maxWidth={'md'} title=\"New Course\">\n        <BasicForm\n          initialValues={initialValues}\n          validationSchema={newCourseValidationSchema}\n          onSubmit={(values: any) => handleSubmit(values)}\n        >\n          {(props: any) => {\n            const { values, errors, handleBlur, handleChange, setFieldValue, touched, handleSubmit } = props\n            return (\n              <form style={{ width: '100%', marginTop: 10 }} onSubmit={handleSubmit}>\n                <Grid container spacing={4}>\n                  <Grid item xs={4} sm={4}>\n                    <Input\n                      autoComplete={'off'}\n                      fullWidth\n                      id=\"code\"\n                      label=\"code\"\n                      name=\"code\"\n                      title=\"Code\"\n                      required\n                      value={values.code}\n                      onBlur={handleBlur}\n                      textFieldBreakpoints={{ xs: 12 }}\n                      placeholder=\"Eg: BSBADM311\"\n                      onChange={handleChange}\n                      error={!!errors.code && !!touched.code}\n                      helperText={touched.code ? errors.code : null}\n                    />\n                  </Grid>\n                  <Grid item xs={4} sm={4}>\n                    <Input\n                      autoComplete={'off'}\n                      fullWidth\n                      id=\"cricosCode\"\n                      label=\"cricosCode\"\n                      name=\"cricosCode\"\n                      title=\"Cricos Code\"\n                      required\n                      placeholder=\"Eg: BSBADM311\"\n                      value={values.cricosCode}\n                      onBlur={handleBlur}\n                      textFieldBreakpoints={{ xs: 12 }}\n                      onChange={handleChange}\n                      error={!!errors.cricosCode && !!touched.cricosCode}\n                      helperText={touched.cricosCode ? errors.cricosCode : null}\n                    />\n                  </Grid>\n                </Grid>\n                <Grid container xs={8} sm={8} spacing={3}>\n                  <Grid item xs={12} sm={12}>\n                    <Input\n                      autoComplete={'off'}\n                      fullWidth\n                      id=\"name\"\n                      label=\"name\"\n                      name=\"name\"\n                      title=\"Course Name\"\n                      required\n                      placeholder=\"Eg: Advance Diploma of Program Management\"\n                      value={values.name}\n                      onBlur={handleBlur}\n                      textFieldBreakpoints={{ xs: 12 }}\n                      onChange={handleChange}\n                      error={!!errors.name && !!touched.name}\n                      helperText={touched.name ? errors.name : null}\n                    />\n                  </Grid>\n                </Grid>\n                <Grid container spacing={4}>\n                  <Grid item xs={4} sm={4}>\n                    <Input\n                      autoComplete={'off'}\n                      fullWidth\n                      id=\"duration\"\n                      label=\"duration\"\n                      name=\"duration\"\n                      title=\"Duration\"\n                      required\n                      adornmentPosition=\"end\"\n                      adornment={'Hours'}\n                      value={values.duration}\n                      placeholder=\"Eg: 100\"\n                      onBlur={handleBlur}\n                      textFieldBreakpoints={{ xs: 12 }}\n                      onChange={handleChange}\n                      error={!!errors.duration && !!touched.duration}\n                      helperText={touched.duration ? errors.duration : null}\n                    />\n                  </Grid>\n                  <Grid item xs={4} sm={4}>\n                    <Input\n                      autoComplete={'off'}\n                      fullWidth\n                      id=\"group\"\n                      label=\"group\"\n                      name=\"group\"\n                      title=\"Group\"\n                      required\n                      value={values.group}\n                      onBlur={handleBlur}\n                      placeholder=\"Eg: Lorem Ipsum\"\n                      textFieldBreakpoints={{ xs: 12 }}\n                      onChange={handleChange}\n                      error={!!errors.group && !!touched.group}\n                      helperText={touched.group ? errors.group : null}\n                    />\n                  </Grid>\n                  <Grid item xs={4} sm={4}>\n                    <InputDatePicker\n                      required\n                      title={'End Date'}\n                      placeholder=\"DD/MM/YYYY\"\n                      selectedDate={values.endDate}\n                      onHandleDateChange={(date) => {\n                        setFieldValue('endDate', moment(date).format('DD/MM/yyyy'))\n                      }}\n                    />\n                  </Grid>\n                </Grid>\n                <Grid container xs={10} sm={10} direction=\"column\">\n                  {/* <FormControl style={{ alignItems: 'center', flexDirection: 'row', marginTop:10 }}> */}\n                  {/* <FormHelperText className={classes.label}>Select Campuses</FormHelperText><span className={classes.asterik}>&#42;</span> */}\n                  <Typography variant=\"subtitle2\" className={classes.label}>\n                    Select Campuses\n                    <span className={classes.asterik}>&#42;</span>\n                  </Typography>\n                  {/* </FormControl> */}\n                  <div style={{ display: 'flex', flexDirection: 'row' }}>\n                    {campuses.map((val) => (\n                      <InputCheckBox\n                        label={val.label}\n                        error={false}\n                        name={val.name}\n                        key={val.key}\n                        handleChange={(e) => {\n                          let camp = []\n                          if (values.campuses.includes(e.target.name)) {\n                            camp = values.campuses.filter((cap: string) => e.target.name !== cap)\n                            setFieldValue('campuses', camp)\n                          } else {\n                            e.target.checked && values.campuses.push(e.target.name)\n                            setFieldValue('campuses', values.campuses)\n                          }\n                        }}\n                        checked={values.campuses.find((camp: string) => val.name === camp)}\n                      />\n                    ))}\n                  </div>\n                </Grid>\n                <Grid\n                  container\n                  direction=\"row\"\n                  spacing={3}\n                  justify=\"flex-end\"\n                  alignContent=\"flex-end\"\n                  alignItems=\"flex-end\"\n                >\n                  <Grid item xs={1} sm={2}>\n                    <CancelButton onPress={onCloseModal} label={'Cancel'} />\n                  </Grid>\n                  <Grid item xs={2} sm={2}>\n                    <SubmitButton onPress={handleSubmit} label=\"Add Course\" />\n                  </Grid>\n                </Grid>\n              </form>\n            )\n          }}\n        </BasicForm>\n      </Modal>\n      <AutoHideSnackBar\n        autoHideDuration={autoHideFeedback?.type === 'success' ? 3000 : 6000}\n        handleClose={() => setAutoHideFeedback(null)}\n        message={!!autoHideFeedback?.message ? autoHideFeedback.message : ''}\n        severity={autoHideFeedback?.type}\n        open={!!autoHideFeedback}\n      />\n    </>\n  )\n}\n","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Unitization/utils.ts",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/config/apolloConfig.ts",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/config/authConfig.ts",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/config/tokenConfig.ts",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/contexts.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/graphql/client.ts",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/index.js",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/AccountSetting/PasswordSettings.tsx",["302","303","304","305"],"import { Divider, Grid, Typography } from '@material-ui/core'\nimport { Auth } from 'aws-amplify'\nimport React, { useState } from 'react'\nimport { AutoHideSnackBar } from '../../components/common/AutoHideSnakBar'\nimport { BasicForm } from '../../components/common/BasicForm'\nimport { CancelButton } from '../../components/common/CancelButton'\nimport { Input } from '../../components/common/Input'\nimport { SubmitButton } from '../../components/common/SubmitButton'\nimport { PasswordInstruction } from '../../utils/passwordInstruction'\nimport { passwordSettingValidationSchema, PasswordSettingFormValue } from './utils'\nimport { Feedback, getSuccessFeedback } from '../../utils/feedback'\n\nconst regex = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/\nconst regexUL = /^(?=.*[a-z])(?=.*[A-Z])/\n\nexport const PasswordSettings = () => {\n  const [autoHideFeedback, setAutoHideFeedback] = useState<Feedback | null>(null)\n  const [errorMessage, setErrorMessage] = useState<string | null>(null)\n  const initialValues: PasswordSettingFormValue = {\n    currentPassword: '',\n    newPassword: '',\n    confirmPassword: ''\n  }\n\n  const handleSubmit = (values: any) => {\n    Auth.currentAuthenticatedUser()\n      .then((user) => {\n        return Auth.changePassword(user, values.currentPassword, values.newPassword)\n      })\n      .then((data) => {\n        if (data) {\n          setErrorMessage('')\n          setAutoHideFeedback(getSuccessFeedback('Password Change Successfully!'))\n        }\n      })\n      .catch((err) => {\n        if (err) {\n          setErrorMessage('Please enter old password correct!')\n        }\n      })\n  }\n\n  return (\n    <Grid spacing={1} container direction=\"column\">\n      <BasicForm\n        initialValues={initialValues}\n        validationSchema={passwordSettingValidationSchema}\n        onSubmit={(values: any) => handleSubmit(values)}\n      >\n        {(props: any) => {\n          const { values, errors, touched, handleSubmit, handleBlur, handleChange, handleReset } = props\n          return (\n            <form style={{ width: '100%' }} onSubmit={handleSubmit}>\n              <Grid container justify=\"space-between\" direction=\"row\">\n                <Grid item>\n                  <Typography\n                    style={{ fontFamily: 'Merriweather', fontWeight: 'bold', fontSize: 20, color: '#3B3A3C' }}\n                  >\n                    {' '}\n                    Password Settings\n                  </Typography>\n                </Grid>\n                <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-around', marginRight: 30 }}>\n                  <Grid item xs={1}>\n                    <CancelButton onPress={handleReset} label=\"Cancel\"></CancelButton>\n                  </Grid>\n                  <Grid item xs={1}>\n                    <SubmitButton label=\"Save\" onPress={handleSubmit}></SubmitButton>\n                  </Grid>\n                </div>\n              </Grid>\n              <Divider\n                variant=\"fullWidth\"\n                style={{ marginTop: 25, marginBottom: 25, backgroundColor: '#E5E7E8' }}\n              ></Divider>\n              {errorMessage && (\n                <Typography\n                  variant=\"caption\"\n                  style={{ fontFamily: 'Merriweather', fontSize: 15, color: 'red', width: '50%', textAlign: 'center' }}\n                >\n                  {errorMessage}\n                </Typography>\n              )}\n              <Grid container spacing={4}>\n                <Grid item xs={4} sm={4}>\n                  <Input\n                    autoComplete={'off'}\n                    fullWidth\n                    id=\"currentPassword\"\n                    label=\"currentPassword\"\n                    name=\"currentPassword\"\n                    title=\"Current Password\"\n                    value={values.currentPassword}\n                    onBlur={handleBlur}\n                    textFieldBreakpoints={{ xs: 12 }}\n                    placeholder=\"Old Password\"\n                    onChange={handleChange}\n                    error={!!errors.currentPassword && !!touched.currentPassword}\n                    helperText={touched.currentPassword ? errors.currentPassword : null}\n                    type=\"password\"\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={4}>\n                <Grid item xs={4} sm={4}>\n                  <Input\n                    autoComplete={'off'}\n                    fullWidth\n                    id=\"newPassword\"\n                    label=\"newPassword\"\n                    name=\"newPassword\"\n                    title=\"New Password\"\n                    value={values.newPassword}\n                    onBlur={handleBlur}\n                    textFieldBreakpoints={{ xs: 12 }}\n                    placeholder=\"New Password\"\n                    onChange={handleChange}\n                    error={!!errors.newPassword && !!touched.newPassword}\n                    helperText={touched.newPassword ? errors.newPassword : null}\n                    type=\"password\"\n                  />\n                  {values.newPassword && (\n                    <PasswordInstruction\n                      isLengthValid={values.newPassword.length > 8}\n                      isSpecialCharValid={regex.test(values.newPassword)}\n                      isUpperLowerCaseValid={regexUL.test(values.newPassword)}\n                    />\n                  )}\n                </Grid>\n                <Grid item xs={4} sm={4}>\n                  <Input\n                    autoComplete={'off'}\n                    fullWidth\n                    id=\"confirmPassword\"\n                    label=\"confirmPassword\"\n                    name=\"confirmPassword\"\n                    title=\"Confirm Password\"\n                    value={values.confirmPassword}\n                    onBlur={handleBlur}\n                    textFieldBreakpoints={{ xs: 12 }}\n                    placeholder=\"Re-enter New Password\"\n                    onChange={handleChange}\n                    error={!!errors.confirmPassword && !!touched.confirmPassword}\n                    helperText={touched.confirmPassword ? errors.confirmPassword : null}\n                    type=\"password\"\n                  />\n                </Grid>\n              </Grid>\n            </form>\n          )\n        }}\n      </BasicForm>\n      <AutoHideSnackBar\n        autoHideDuration={autoHideFeedback?.type === 'success' ? 3000 : 6000}\n        handleClose={() => setAutoHideFeedback(null)}\n        message={!!autoHideFeedback?.message ? autoHideFeedback.message : ''}\n        severity={autoHideFeedback?.type}\n        open={!!autoHideFeedback}\n      />\n    </Grid>\n  )\n}\n","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/AccountSetting/PersonalDetails.tsx",["306","307","308"],"import { Divider, Grid, Typography } from '@material-ui/core'\nimport { Auth } from 'aws-amplify'\nimport React, { useContext, FC, useState } from 'react'\nimport { AutoHideSnackBar } from '../../components/common/AutoHideSnakBar'\nimport { BasicForm } from '../../components/common/BasicForm'\nimport { CancelButton } from '../../components/common/CancelButton'\nimport { Input } from '../../components/common/Input'\nimport { SubmitButton } from '../../components/common/SubmitButton'\nimport { CurrentUserContext } from '../../contexts'\nimport { PersonalDetailFormValue, personalDetailValidationSchema } from './utils'\nimport { Feedback, getSuccessFeedback, getErrorFeedback } from '../../utils/feedback'\n\ninterface PersonalDetialProps {\n  handleEdit: () => void\n  enableEdit: boolean\n}\n\nexport const PersonalDetails: FC<PersonalDetialProps> = ({ handleEdit, enableEdit }) => {\n  const curs = useContext(CurrentUserContext)\n  const [autoHideFeedback, setAutoHideFeedback] = useState<Feedback | null>(null)\n  // const [errorMessage, setErrorMessage] = useState<string | null>(null)\n\n  const initialValues: PersonalDetailFormValue = {\n    fname: curs.fname ? curs.fname : '',\n    lname: curs.lname ? curs.lname : '',\n    email: curs.email ? curs.email : '',\n    phonenumber: curs.phoneNumber ? curs.phoneNumber : ''\n  }\n\n  const handleSubmit = (values: any) => {\n    Auth.currentAuthenticatedUser()\n      .then((user) => {\n        console.log(values.phonenumber)\n        return Auth.updateUserAttributes(user, {\n          // 'email': values.email,\n          phone_number: values.phonenumber,\n          'custom:firstName': values.fname,\n          'custom:lastName': values.lname\n        })\n      })\n      .then((data) => {\n        console.log(data)\n        if (data) {\n          handleEdit()\n\n          // setErrorMessage(\"\")\n          setAutoHideFeedback(getSuccessFeedback('Profile Details Updated Successfully!'))\n        }\n      })\n      .catch((err) => setAutoHideFeedback(getErrorFeedback(err)))\n  }\n\n  return (\n    <Grid spacing={1} container direction=\"column\">\n      <BasicForm\n        initialValues={initialValues}\n        validationSchema={personalDetailValidationSchema}\n        onSubmit={(values: any) => handleSubmit(values)}\n      >\n        {(props: any) => {\n          const { values, errors, touched, handleSubmit, handleBlur, handleChange } = props\n          return (\n            <form style={{ width: '100%' }} onSubmit={handleSubmit}>\n              <Grid container justify=\"space-between\" direction=\"row\">\n                <Grid item>\n                  <Typography\n                    style={{ fontFamily: 'Merriweather', fontWeight: 'bold', fontSize: 20, color: '#3B3A3C' }}\n                  >\n                    {' '}\n                    Personal Details\n                  </Typography>\n                </Grid>\n                <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-around', marginRight: 30 }}>\n                  <Grid item xs={1}>\n                    <CancelButton onPress={() => console.log('!')} label=\"Cancel\"></CancelButton>\n                  </Grid>\n                  <Grid item xs={1}>\n                    <SubmitButton label=\"Save\" onPress={handleSubmit}></SubmitButton>\n                  </Grid>\n                </div>\n              </Grid>\n              <Divider\n                variant=\"fullWidth\"\n                style={{ marginTop: 25, marginBottom: 25, backgroundColor: '#E5E7E8' }}\n              ></Divider>\n\n              <Grid container spacing={4}>\n                <Grid item xs={4} sm={4}>\n                  <Input\n                    autoComplete={'off'}\n                    fullWidth\n                    disabled={!enableEdit}\n                    id=\"fname\"\n                    label=\"First Name\"\n                    name=\"fname\"\n                    title=\"First Name\"\n                    value={values.fname}\n                    onBlur={handleBlur}\n                    textFieldBreakpoints={{ xs: 12 }}\n                    placeholder=\"Enter first name\"\n                    onChange={handleChange}\n                    error={!!errors.fname && !!touched.fname}\n                    helperText={touched.fname ? errors.fname : null}\n                  />\n                </Grid>\n                <Grid item xs={4} sm={4}>\n                  <Input\n                    autoComplete={'off'}\n                    fullWidth\n                    disabled={!enableEdit}\n                    id=\"lname\"\n                    label=\"Last Name\"\n                    name=\"lname\"\n                    title=\"Last Name\"\n                    value={values.lname}\n                    onBlur={handleBlur}\n                    textFieldBreakpoints={{ xs: 12 }}\n                    placeholder=\"Enter last name\"\n                    onChange={handleChange}\n                    error={!!errors.lname && !!touched.lname}\n                    helperText={touched.lname ? errors.lname : null}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={4}>\n                <Grid item xs={4} sm={4}>\n                  <Input\n                    autoComplete={'off'}\n                    fullWidth\n                    disabled\n                    id=\"email\"\n                    label=\"Email\"\n                    name=\"email\"\n                    title=\"Email\"\n                    value={values.email}\n                    onBlur={handleBlur}\n                    textFieldBreakpoints={{ xs: 12 }}\n                    placeholder=\"Enter email address\"\n                    onChange={handleChange}\n                    error={!!errors.email && !!touched.email}\n                    helperText={touched.email ? errors.email : null}\n                  />\n                </Grid>\n                <Grid item xs={4} sm={4}>\n                  <Input\n                    autoComplete={'off'}\n                    fullWidth\n                    disabled={!enableEdit}\n                    id=\"phonenumber\"\n                    label=\"Phone number\"\n                    name=\"phonenumber\"\n                    title=\"Mobile Number\"\n                    value={values.phonenumber}\n                    onBlur={handleBlur}\n                    textFieldBreakpoints={{ xs: 12 }}\n                    placeholder=\"Enter mobile number\"\n                    onChange={handleChange}\n                    error={!!errors.phonenumber && !!touched.phonenumber}\n                    helperText={touched.phonenumber ? errors.phonenumber : null}\n                  />\n                </Grid>\n              </Grid>\n            </form>\n          )\n        }}\n      </BasicForm>\n      <AutoHideSnackBar\n        autoHideDuration={autoHideFeedback?.type === 'success' ? 3000 : 6000}\n        handleClose={() => setAutoHideFeedback(null)}\n        message={!!autoHideFeedback?.message ? autoHideFeedback.message : ''}\n        severity={autoHideFeedback?.type}\n        open={!!autoHideFeedback}\n      />\n    </Grid>\n  )\n}\n","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/AccountSetting/ProfilePicEdit.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/AccountSetting/index.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/AccountSetting/utils.ts",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/CreateUser.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/ForgotPassword/ForgotPassword.tsx",["309","310","311"],"/* eslint-disable react/no-unescaped-entities */\nimport { TextField, Typography } from '@material-ui/core'\nimport { GoogleReCaptcha } from 'react-google-recaptcha-v3'\nimport React, { useState } from 'react'\nimport { BasePage } from '../../components/BasePage'\nimport { BasicForm } from '../../components/common/BasicForm'\nimport { SubmitButton } from '../../components/common/SubmitButton'\nimport { FPFormValue, fpValidationSchema } from './utils'\nimport { Auth } from 'aws-amplify'\nimport { useHistory } from 'react-router-dom'\nimport { AutoHideSnackBar } from '../../components/common/AutoHideSnakBar'\nimport { Feedback, getSuccessFeedback, getErrorFeedback } from '../../utils/feedback'\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const ForgotPassword = () => {\n  const [autoHideFeedback, setAutoHideFeedback] = useState<Feedback | null>(null)\n  const [isLoading, setLoading] = useState<boolean>(false)\n  const history = useHistory()\n  const initialValues: FPFormValue = {\n    email: ''\n  }\n\n  const handleForgotPassword = (values: any) => {\n    setLoading(true)\n    Auth.forgotPassword(values.email)\n      .then((data) => {\n        if (data) {\n          setLoading(false)\n          setAutoHideFeedback(getSuccessFeedback('Email Sent Successfully!'))\n          history.push('/resetpassword', { email: values.email })\n        }\n      })\n      .catch(() => {\n        setLoading(false)\n        setAutoHideFeedback(getErrorFeedback('Please send request again!'))\n      })\n  }\n\n  return (\n    <BasePage title=\"Forgot Password?\">\n      <Typography\n        variant=\"caption\"\n        style={{ fontFamily: 'Merriweather', fontSize: 15, color: '#607D8B', width: '50%', textAlign: 'center' }}\n      >\n        Don't worry. Enter your registered email address and we'll send you an OTP to reset your password.\n      </Typography>\n      <BasicForm\n        initialValues={initialValues}\n        validationSchema={fpValidationSchema}\n        onSubmit={(values: any) => handleForgotPassword(values)}\n      >\n        {(props: any) => {\n          const { values, errors, setFieldValue, touched, handleSubmit } = props\n          return (\n            <>\n              <TextField\n                id=\"email\"\n                value={values.email}\n                onChange={(e) => setFieldValue('email', e.target.value)}\n                InputLabelProps={{ shrink: true, style: { color: '#607D8B', fontFamily: 'Lato', fontSize: 15 } }}\n                style={{ width: '45%', marginTop: 20 }}\n                label=\"Email\"\n                InputProps={{\n                  style: { color: '#3B3A3C', fontFamily: 'Lato', fontSize: 16 }\n                }}\n                error={!!errors.email && !!touched.email}\n                helperText={touched.email ? errors.email : null}\n              />\n\n              <GoogleReCaptcha onVerify={(token) => console.log(token)} />\n\n              <div style={{ width: '50%', marginTop: 25 }}>\n                <SubmitButton loading={isLoading} label=\"Forgot Password\" onPress={handleSubmit} />\n              </div>\n            </>\n          )\n        }}\n      </BasicForm>\n      <AutoHideSnackBar\n        autoHideDuration={autoHideFeedback?.type === 'success' ? 3000 : 6000}\n        handleClose={() => setAutoHideFeedback(null)}\n        message={!!autoHideFeedback?.message ? autoHideFeedback.message : ''}\n        severity={autoHideFeedback?.type}\n        open={!!autoHideFeedback}\n      />\n    </BasePage>\n  )\n}\n","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/ForgotPassword/utils.ts",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/Login/NewPassword.tsx",["312","313","314"],"import { IconButton, InputAdornment, TextField } from '@material-ui/core'\nimport React, { FC, useContext, useState } from 'react'\nimport { BasePage } from '../../components/BasePage'\nimport { BasicForm } from '../../components/common/BasicForm'\nimport { SubmitButton } from '../../components/common/SubmitButton'\nimport { newPasswordFormValue, newPasswordValidationSchema } from './utils'\nimport { VisibilityOffOutlined, VisibilityOutlined } from '@material-ui/icons'\nimport { AutoHideSnackBar } from '../../components/common/AutoHideSnakBar'\nimport { Feedback } from '../../utils/feedback'\nimport { CurrentUserContext } from '../../contexts'\n\nexport const NewPassword: FC<{\n  completeNewPassword: (username: string, newPassword: string) => void\n  isLoading: boolean\n}> = ({ completeNewPassword, isLoading }) => {\n  const currentUser = useContext(CurrentUserContext)\n  const [autoHideFeedback, setAutoHideFeedback] = useState<Feedback | null>(null)\n  const initialValues: newPasswordFormValue = {\n    password: '',\n    showPassword: false,\n    confirmpassword: '',\n    showconfirmpassword: false\n  }\n\n  const handleForgotPassword = (values: any) => {\n    completeNewPassword(currentUser.username ? currentUser.username : '', values.password)\n  }\n\n  return (\n    <BasePage title=\"Reset Password\">\n      <BasicForm\n        initialValues={initialValues}\n        validationSchema={newPasswordValidationSchema}\n        onSubmit={(values: any) => handleForgotPassword(values)}\n      >\n        {(props: any) => {\n          const { values, errors, setFieldValue, touched, handleSubmit } = props\n          return (\n            <>\n              <TextField\n                id=\"password\"\n                InputLabelProps={{\n                  shrink: true,\n                  style: { color: '#607D8B', fontFamily: 'Lato', fontSize: 15 }\n                }}\n                style={{ width: '45%', marginTop: 20 }}\n                error={!!errors.password && !!touched.password}\n                helperText={touched.password ? errors.password : null}\n                InputProps={{\n                  type: values.showPassword ? 'text' : 'password',\n                  style: { color: '#3B3A3C', fontFamily: 'Lato', fontSize: 16 },\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        aria-label=\"toggle password visibility\"\n                        onClick={() => setFieldValue('showPassword', !values.showPassword)}\n                        onMouseDown={(event: React.MouseEvent<HTMLButtonElement>) => {\n                          event.preventDefault()\n                        }}\n                      >\n                        {values.showPassword ? (\n                          <VisibilityOutlined fontSize=\"small\" style={{ color: '#B0BEC5' }} />\n                        ) : (\n                          <VisibilityOffOutlined style={{ color: '#B0BEC5' }} fontSize=\"small\" />\n                        )}\n                      </IconButton>\n                    </InputAdornment>\n                  )\n                }}\n                label=\"New Password\"\n                value={values.password}\n                onChange={(e) => setFieldValue('password', e.target.value)}\n              />\n\n              <TextField\n                id=\"confirmpassword\"\n                InputLabelProps={{\n                  shrink: true,\n                  style: { color: '#607D8B', fontFamily: 'Lato', fontSize: 15 }\n                }}\n                style={{ width: '45%', marginTop: 20 }}\n                error={!!errors.confirmpassword && !!touched.confirmpassword}\n                helperText={touched.confirmpassword ? errors.confirmpassword : null}\n                InputProps={{\n                  type: values.showconfirmpassword ? 'text' : 'password',\n                  style: { color: '#3B3A3C', fontFamily: 'Lato', fontSize: 16 },\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        aria-label=\"toggle password visibility\"\n                        onClick={() => setFieldValue('showconfirmpassword', !values.showconfirmpassword)}\n                        onMouseDown={(event: React.MouseEvent<HTMLButtonElement>) => {\n                          event.preventDefault()\n                        }}\n                      >\n                        {values.showconfirmpassword ? (\n                          <VisibilityOutlined fontSize=\"small\" style={{ color: '#B0BEC5' }} />\n                        ) : (\n                          <VisibilityOffOutlined style={{ color: '#B0BEC5' }} fontSize=\"small\" />\n                        )}\n                      </IconButton>\n                    </InputAdornment>\n                  )\n                }}\n                label=\"Confirm Password\"\n                value={values.confirmpassword}\n                onChange={(e) => setFieldValue('confirmpassword', e.target.value)}\n              />\n              <div style={{ width: '50%', marginTop: 25 }}>\n                <SubmitButton loading={isLoading} label=\"Reset Password\" onPress={handleSubmit} />\n              </div>\n            </>\n          )\n        }}\n      </BasicForm>\n      <AutoHideSnackBar\n        autoHideDuration={autoHideFeedback?.type === 'success' ? 3000 : 6000}\n        handleClose={() => setAutoHideFeedback(null)}\n        message={!!autoHideFeedback?.message ? autoHideFeedback.message : ''}\n        severity={autoHideFeedback?.type}\n        open={!!autoHideFeedback}\n      />\n    </BasePage>\n  )\n}\n","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/Login/index.tsx",["315","316"],"import { IconButton, InputAdornment, TextField, Typography } from '@material-ui/core'\nimport { VisibilityOutlined, VisibilityOffOutlined } from '@material-ui/icons'\nimport React, { FC, useEffect } from 'react'\nimport { BasicForm } from '../../components/common/BasicForm'\nimport { SubmitButton } from '../../components/common/SubmitButton'\nimport { LoginFormValue, loginValidationSchema } from './utils'\nimport { BasePage } from '../../components/BasePage'\nimport { Link } from 'react-router-dom'\n\ninterface LoginProps {\n  signIn: (username: string, password: string) => void\n  errorMessage: string | null\n  isLoading: boolean\n}\n\nexport const Login: FC<LoginProps> = ({ errorMessage, signIn, isLoading }) => {\n  useEffect(() => {\n    // signIn(\"astha.patel@solvitude.com\",\"P@ssw0rd1\")\n  }, [])\n\n  const initialValues: LoginFormValue = {\n    email: '',\n    password: '',\n    showPassword: false\n  }\n\n  return (\n    <BasePage title=\"Welcome Back!\">\n      {errorMessage && (\n        <Typography\n          variant=\"caption\"\n          style={{ fontFamily: 'Merriweather', fontSize: 15, color: 'red', width: '50%', textAlign: 'center' }}\n        >\n          {errorMessage}\n        </Typography>\n      )}\n      <BasicForm\n        initialValues={initialValues}\n        validationSchema={loginValidationSchema}\n        onSubmit={(values: any) => signIn(values.email, values.password)}\n      >\n        {(props: any) => {\n          const { values, errors, setFieldValue, touched, handleSubmit } = props\n          return (\n            <>\n              <TextField\n                id=\"standard-basic\"\n                onChange={(e) => setFieldValue('email', e.target.value)}\n                InputLabelProps={{ shrink: true, style: { color: '#607D8B', fontFamily: 'Lato', fontSize: 15 } }}\n                style={{ width: '45%', marginTop: 20 }}\n                label=\"Email\"\n                InputProps={{\n                  style: { color: '#3B3A3C', fontFamily: 'Lato', fontSize: 16 }\n                }}\n                error={!!errors.email && !!touched.email}\n                helperText={touched.email ? errors.email : null}\n              />\n              <TextField\n                id=\"standard-basic\"\n                InputLabelProps={{ shrink: true, style: { color: '#607D8B', fontFamily: 'Lato', fontSize: 15 } }}\n                style={{ width: '45%', marginTop: 20 }}\n                error={!!errors.password && !!touched.password}\n                helperText={touched.password ? errors.password : null}\n                InputProps={{\n                  type: values.showPassword ? 'text' : 'password',\n                  style: { color: '#3B3A3C', fontFamily: 'Lato', fontSize: 16 },\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        aria-label=\"toggle password visibility\"\n                        onClick={() => setFieldValue('showPassword', !values.showPassword)}\n                        onMouseDown={(event: React.MouseEvent<HTMLButtonElement>) => {\n                          event.preventDefault()\n                        }}\n                      >\n                        {values.showPassword ? (\n                          <VisibilityOutlined fontSize=\"small\" style={{ color: '#B0BEC5' }} />\n                        ) : (\n                          <VisibilityOffOutlined style={{ color: '#B0BEC5' }} fontSize=\"small\" />\n                        )}\n                      </IconButton>\n                    </InputAdornment>\n                  )\n                }}\n                label=\"Password\"\n                value={values.password}\n                onChange={(e) => setFieldValue('password', e.target.value)}\n              />\n              <div style={{ width: '45%', textAlign: 'end', marginTop: 5 }}>\n                <Link\n                  to=\"/forgotpassword\"\n                  style={{ fontSize: 11, color: '#607D8B', fontFamily: 'Lato', textDecoration: 'none' }}\n                >\n                  Forgot Password?\n                </Link>\n              </div>\n              <div style={{ width: '50%', marginTop: 25 }}>\n                <SubmitButton loading={isLoading} label=\"Login\" onPress={handleSubmit} />\n              </div>\n            </>\n          )\n        }}\n      </BasicForm>\n    </BasePage>\n  )\n}\n","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/Login/utils.ts",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/ResetPassword/ResetPassword.tsx",["317","318","319","320"],"import { IconButton, InputAdornment, TextField } from '@material-ui/core'\nimport React, { useState } from 'react'\nimport { BasePage } from '../../components/BasePage'\nimport { BasicForm } from '../../components/common/BasicForm'\nimport { SubmitButton } from '../../components/common/SubmitButton'\nimport { resetPasswordFormValue, resetPasswordValidationSchema } from './utils'\nimport { Auth } from 'aws-amplify'\nimport { VisibilityOffOutlined, VisibilityOutlined } from '@material-ui/icons'\nimport { useHistory } from 'react-router-dom'\nimport { AutoHideSnackBar } from '../../components/common/AutoHideSnakBar'\nimport { Feedback, getSuccessFeedback, getErrorFeedback } from '../../utils/feedback'\n\ntype historyData = { email: string }\n\nexport const ResetPassword = () => {\n  const [autoHideFeedback, setAutoHideFeedback] = useState<Feedback | null>(null)\n  const [isLoading, setLoading] = useState<boolean>(false)\n  const history = useHistory()\n  const state = history.location.state\n  const initialValues: resetPasswordFormValue = {\n    password: '',\n    showPassword: false,\n    confirmpassword: '',\n    showconfirmpassword: false,\n    otp: ''\n  }\n\n  const handleForgotPassword = (values: any) => {\n    // Auth.forgotPassword()\n    setLoading(true)\n    const email = (state as historyData) && ((state as historyData).email as string)\n    Auth.forgotPasswordSubmit(email, values.otp, values.password)\n      .then(() => {\n        setLoading(false)\n        setAutoHideFeedback(getSuccessFeedback('Reset Password Successfully!'))\n        history.push('/')\n      })\n      .catch(() => {\n        setLoading(false)\n        setAutoHideFeedback(getErrorFeedback('OTP has been experied!'))\n      })\n  }\n\n  return (\n    <BasePage title=\"Reset Password\">\n      <BasicForm\n        initialValues={initialValues}\n        validationSchema={resetPasswordValidationSchema}\n        onSubmit={(values: any) => handleForgotPassword(values)}\n      >\n        {(props: any) => {\n          const { values, errors, setFieldValue, touched, handleSubmit } = props\n          return (\n            <>\n              <TextField\n                id=\"otp\"\n                InputLabelProps={{\n                  shrink: true,\n                  style: { color: '#607D8B', fontFamily: 'Lato', fontSize: 15 }\n                }}\n                style={{ width: '45%', marginTop: 20 }}\n                error={!!errors.otp && !!touched.otp}\n                helperText={touched.otp ? errors.otp : null}\n                label=\"OTP\"\n                value={values.otp}\n                onChange={(e) => setFieldValue('otp', e.target.value)}\n              />\n              <TextField\n                id=\"password\"\n                InputLabelProps={{\n                  shrink: true,\n                  style: { color: '#607D8B', fontFamily: 'Lato', fontSize: 15 }\n                }}\n                style={{ width: '45%', marginTop: 20 }}\n                error={!!errors.password && !!touched.password}\n                helperText={touched.password ? errors.password : null}\n                InputProps={{\n                  type: values.showPassword ? 'text' : 'password',\n                  style: { color: '#3B3A3C', fontFamily: 'Lato', fontSize: 16 },\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        aria-label=\"toggle password visibility\"\n                        onClick={() => setFieldValue('showPassword', !values.showPassword)}\n                        onMouseDown={(event: React.MouseEvent<HTMLButtonElement>) => {\n                          event.preventDefault()\n                        }}\n                      >\n                        {values.showPassword ? (\n                          <VisibilityOutlined fontSize=\"small\" style={{ color: '#B0BEC5' }} />\n                        ) : (\n                          <VisibilityOffOutlined style={{ color: '#B0BEC5' }} fontSize=\"small\" />\n                        )}\n                      </IconButton>\n                    </InputAdornment>\n                  )\n                }}\n                label=\"New Password\"\n                value={values.password}\n                onChange={(e) => setFieldValue('password', e.target.value)}\n              />\n\n              <TextField\n                id=\"confirmpassword\"\n                InputLabelProps={{\n                  shrink: true,\n                  style: { color: '#607D8B', fontFamily: 'Lato', fontSize: 15 }\n                }}\n                style={{ width: '45%', marginTop: 20 }}\n                error={!!errors.confirmpassword && !!touched.confirmpassword}\n                helperText={touched.confirmpassword ? errors.confirmpassword : null}\n                InputProps={{\n                  type: values.showconfirmpassword ? 'text' : 'password',\n                  style: { color: '#3B3A3C', fontFamily: 'Lato', fontSize: 16 },\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        aria-label=\"toggle password visibility\"\n                        onClick={() => setFieldValue('showconfirmpassword', !values.showconfirmpassword)}\n                        onMouseDown={(event: React.MouseEvent<HTMLButtonElement>) => {\n                          event.preventDefault()\n                        }}\n                      >\n                        {values.showconfirmpassword ? (\n                          <VisibilityOutlined fontSize=\"small\" style={{ color: '#B0BEC5' }} />\n                        ) : (\n                          <VisibilityOffOutlined style={{ color: '#B0BEC5' }} fontSize=\"small\" />\n                        )}\n                      </IconButton>\n                    </InputAdornment>\n                  )\n                }}\n                label=\"Confirm Password\"\n                value={values.confirmpassword}\n                onChange={(e) => setFieldValue('confirmpassword', e.target.value)}\n              />\n              <div style={{ width: '50%', marginTop: 25 }}>\n                <SubmitButton loading={isLoading} label=\"Reset Password\" onPress={handleSubmit} />\n              </div>\n            </>\n          )\n        }}\n      </BasicForm>\n      <AutoHideSnackBar\n        autoHideDuration={autoHideFeedback?.type === 'success' ? 3000 : 6000}\n        handleClose={() => setAutoHideFeedback(null)}\n        message={!!autoHideFeedback?.message ? autoHideFeedback.message : ''}\n        severity={autoHideFeedback?.type}\n        open={!!autoHideFeedback}\n      />\n    </BasePage>\n  )\n}\n","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/ResetPassword/utils.ts",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/SelectCampus/index.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/Unitization/index.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/react-app-env.d.ts",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/reportWebVitals.js",["321","322"],"const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/setupTests.js",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/utils/a11y.tsx",["323","324","325"],"export const tabPanelId = (index: number) => `tabpanel-${index}`\nexport const tabIndex = (index: number) => `tab-${index}`\n\nexport const a11yProps = (index: number) => {\n  return {\n    id: tabIndex(index),\n    'aria-controls': tabPanelId(index)\n  }\n}\n","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/utils/authenticator.ts",["326","327"],"import { CognitoUser } from 'amazon-cognito-identity-js'\nimport { Auth } from 'aws-amplify'\nimport { extractCurrentUser } from '../auth'\n\nexport const handleCognitoUser = async (user: CognitoUser | null) => {\n  if (user) {\n    const currentUser = await extractCurrentUser(user)\n    return currentUser\n  }\n\n  return ''\n}\n\nexport const currentUserAuthenticator = () => {\n  Auth.currentAuthenticatedUser()\n    .then(handleCognitoUser)\n    .catch((error) => {\n      return error\n    })\n}\n","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/utils/feedback.ts",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/utils/passwordInstruction.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/utils/unitizationdata.ts",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/Unitization/Courses.tsx",["328"],"import { Button, Grid, makeStyles, Typography } from '@material-ui/core'\nimport { useQuery } from '@apollo/react-hooks'\nimport { loader } from 'graphql.macro'\nimport { Column } from 'material-table'\nimport React, { FC, useContext, useEffect, useState } from 'react'\nimport { SearchField } from '../../components/common/SearchField'\nimport { CreateButton } from '../../components/common/CreateButton'\nimport { Table } from '../../components/common/Table'\nimport { courseDataType } from '../../utils/unitizationdata'\nimport { NewCourseModal } from '../../components/common/Unitization/NewCourseModal'\nimport { CSVLink } from 'react-csv'\nimport { CurrentUserContext } from '../../contexts'\nimport { useHistory } from 'react-router-dom'\nimport { ExportIcon } from '../../utils/icon'\nimport { AddOutlined } from '@material-ui/icons'\n// GraphQL\nconst GET_COURSES = loader('../../graphql/common/getCourses.graphql')\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    background: '#FFFFFF',\n    borderRadius: 15,\n    marginRight: 20,\n    marginLeft: 20\n  },\n  coursesCount: {\n    fontFamily: 'Merriweather-Regular',\n    fontSize: 19,\n    fontWeight: 'bold',\n    marginTop: 15,\n    marginBottom: 10,\n    color: '#3B3A3C'\n  },\n  exportCSV: {\n    fontFamily: 'Merriweather-Regular',\n    fontWeight: 'bold',\n    fontSize: 15,\n    color: '#009AAA'\n  },\n  csvLink: {\n    flexDirection: 'row',\n    display: 'flex',\n    alignItems: 'center',\n    textDecoration: 'none'\n  }\n}))\n\nconst columns: Column<courseDataType>[] = [\n  {\n    title: 'Code',\n    field: 'courseCode',\n    cellStyle: {\n      fontFamily: 'Lato-Regular',\n      color: '#3B3A3C',\n      fontWeight: 'bold',\n      fontStyle: 'normal'\n    }\n  },\n  {\n    title: 'Course Name',\n    field: 'courseName',\n    cellStyle: {\n      fontFamily: 'Lato-Regular',\n      color: '#3B3A3C',\n      fontWeight: 'bold',\n      fontStyle: 'normal'\n    }\n  },\n  {\n    title: 'Duration',\n    field: 'courseHours',\n    cellStyle: {\n      fontFamily: 'Lato-Light',\n      color: '#3B3A3C',\n      fontWeight: 'normal',\n      fontStyle: 'normal'\n    },\n    render: (rowData: courseDataType) => (\n      <Grid container style={{ marginTop: 6, marginBottom: 6, marginLeft: 1 }} spacing={2}>\n        <Grid container direction=\"row\">\n          {rowData.courseHours + ' Hours'}\n        </Grid>\n      </Grid>\n    )\n  },\n  {\n    title: 'Group',\n    field: 'courseGroup',\n    cellStyle: {\n      fontFamily: 'Lato-Light',\n      color: '#3B3A3C',\n      fontWeight: 'normal',\n      fontStyle: 'normal'\n    }\n  },\n  {\n    title: 'End Date',\n    field: 'courseEndDate',\n    cellStyle: {\n      fontFamily: 'Lato-Light',\n      color: '#3B3A3C',\n      fontWeight: 'normal',\n      fontStyle: 'normal'\n    },\n    render: (rowData: courseDataType) => (\n      <Grid container style={{ marginTop: 6, marginBottom: 6, marginLeft: 1 }} spacing={2}>\n        <Grid container direction=\"row\">\n          {rowData.courseEndDate ? rowData.courseEndDate : ' -'}\n        </Grid>\n      </Grid>\n    )\n  }\n]\n\nconst Courses: FC<{ baseUrl: string }> = ({ baseUrl }) => {\n  const classes = useStyles()\n  const history = useHistory()\n  const currentUser = useContext(CurrentUserContext)\n  const [open, setOpen] = useState(false)\n  const [searchText, setSearchText] = useState<string>('')\n  const { loading, data } = useQuery(GET_COURSES, {\n    variables: {\n      campusId: '78286468-22e1-4ffa-be2b-8011a5c1b714'\n    }\n  })\n\n  const handleModal = () => {\n    setOpen(!open)\n  }\n\n  useEffect(() => {\n    currentUser.resetPasswordFlag && currentUser.resetPasswordFlag === 'false' && localStorage.removeItem('fpassword')\n  }, [data])\n\n  return (\n    <Grid container spacing={5}>\n      <Grid item xs={8} md={10} lg={9}>\n        <SearchField\n          placeholder=\"Search by Course Name and Number\"\n          onChange={(searchText: string) => {\n            if (searchText.length > 3) {\n              setSearchText(searchText)\n            } else {\n              setSearchText('')\n            }\n          }}\n        />\n      </Grid>\n      <Grid item xs={4} md={2} lg={3}>\n        <CreateButton startIcon={<AddOutlined />} label=\"New Courses\" onClick={() => setOpen(true)}></CreateButton>\n      </Grid>\n      <Grid item xs={12} className={classes.root}>\n        <div\n          style={{\n            flexDirection: 'row',\n            display: 'flex',\n            alignItems: 'center'\n          }}\n        >\n          <Button onClick={() => history.push(`${baseUrl}/summary`)}>Text</Button>\n          {data && (\n            <Typography variant=\"subtitle1\" className={classes.coursesCount}>\n              {(data?.searchCampusCourses?.courseList.length ?? 0) + ' Courses'}\n            </Typography>\n          )}\n          {/* <Button href=\"#text-buttons\" style={{ marginLeft: 10, textTransform: 'none' }}> */}\n          <CSVLink\n            data={data?.searchCampusCourses?.courseList || []}\n            className={classes.csvLink}\n            filename={'Unitization'}\n            style={{ marginLeft: 10, textTransform: 'none' }}\n          >\n            <ExportIcon style={{ marginTop: 10, fontSize: 20 }} />\n            <Typography variant=\"subtitle2\" className={classes.exportCSV}>\n              Export .csv\n            </Typography>\n          </CSVLink>\n          {/* </Button> */}\n        </div>\n        <Table\n          isLoading={loading}\n          columns={columns}\n          option={{ toolbar: false }}\n          data={\n            data?.searchCampusCourses?.courseList.filter(\n              (val: any) =>\n                val.courseName.toLowerCase().includes(searchText.toLowerCase()) ||\n                val.courseCode.toLowerCase().includes(searchText.toLowerCase())\n            ) || []\n          }\n        />\n      </Grid>\n      <NewCourseModal open={open} onCloseModal={handleModal} />\n    </Grid>\n  )\n}\n\nexport default Courses\n","/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/Unitization/Unit.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Unitization/SummaryTabPanel.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/pages/Unitization/Schedule.tsx",["329","330","331","332","333","334"],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Unitization/Schedule/DateRange.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/utils/icon.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/EditButton.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Table.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Unitization/Schedule/SelectDateModal.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Unitization/Schedule/GenerateSchedule.tsx",[],"/Users/jitendrabhansali/Documents/work 2020/solvitude 2020/danfordportal/src/components/common/Unitization/Schedule/WarningModal.tsx",[],{"ruleId":"335","severity":1,"message":"336","line":25,"column":29,"nodeType":"337","messageId":"338","endLine":25,"endColumn":34},{"ruleId":"335","severity":1,"message":"336","line":179,"column":20,"nodeType":"337","messageId":"338","endLine":179,"endColumn":25},{"ruleId":"335","severity":1,"message":"336","line":21,"column":35,"nodeType":"337","messageId":"338","endLine":21,"endColumn":64},{"ruleId":"335","severity":1,"message":"336","line":9,"column":24,"nodeType":"337","messageId":"338","endLine":9,"endColumn":29},{"ruleId":"335","severity":1,"message":"336","line":66,"column":24,"nodeType":"337","messageId":"338","endLine":66,"endColumn":29},{"ruleId":"335","severity":1,"message":"336","line":14,"column":33,"nodeType":"337","messageId":"338","endLine":21,"endColumn":29},{"ruleId":"339","severity":1,"message":"340","line":7,"column":21,"nodeType":"341","messageId":"342","endLine":7,"endColumn":24,"suggestions":"343"},{"ruleId":"339","severity":1,"message":"340","line":8,"column":87,"nodeType":"341","messageId":"342","endLine":8,"endColumn":90,"suggestions":"344"},{"ruleId":"335","severity":1,"message":"336","line":52,"column":22,"nodeType":"337","messageId":"338","endLine":74,"endColumn":18},{"ruleId":"339","severity":1,"message":"340","line":12,"column":30,"nodeType":"341","messageId":"342","endLine":12,"endColumn":33,"suggestions":"345"},{"ruleId":"335","severity":1,"message":"336","line":23,"column":3,"nodeType":"346","messageId":"338","endLine":23,"endColumn":11},{"ruleId":"335","severity":1,"message":"336","line":65,"column":27,"nodeType":"337","messageId":"338","endLine":65,"endColumn":32},{"ruleId":"339","severity":1,"message":"340","line":86,"column":33,"nodeType":"341","messageId":"342","endLine":86,"endColumn":36,"suggestions":"347"},{"ruleId":"339","severity":1,"message":"340","line":135,"column":30,"nodeType":"341","messageId":"342","endLine":135,"endColumn":33,"suggestions":"348"},{"ruleId":"339","severity":1,"message":"340","line":137,"column":20,"nodeType":"341","messageId":"342","endLine":137,"endColumn":23,"suggestions":"349"},{"ruleId":"335","severity":1,"message":"336","line":16,"column":33,"nodeType":"337","messageId":"338","endLine":16,"endColumn":38},{"ruleId":"339","severity":1,"message":"340","line":25,"column":33,"nodeType":"341","messageId":"342","endLine":25,"endColumn":36,"suggestions":"350"},{"ruleId":"339","severity":1,"message":"340","line":48,"column":28,"nodeType":"341","messageId":"342","endLine":48,"endColumn":31,"suggestions":"351"},{"ruleId":"339","severity":1,"message":"340","line":50,"column":18,"nodeType":"341","messageId":"342","endLine":50,"endColumn":21,"suggestions":"352"},{"ruleId":"339","severity":1,"message":"340","line":30,"column":33,"nodeType":"341","messageId":"342","endLine":30,"endColumn":36,"suggestions":"353"},{"ruleId":"339","severity":1,"message":"340","line":58,"column":28,"nodeType":"341","messageId":"342","endLine":58,"endColumn":31,"suggestions":"354"},{"ruleId":"339","severity":1,"message":"340","line":60,"column":18,"nodeType":"341","messageId":"342","endLine":60,"endColumn":21,"suggestions":"355"},{"ruleId":"339","severity":1,"message":"340","line":23,"column":41,"nodeType":"341","messageId":"342","endLine":23,"endColumn":44,"suggestions":"356"},{"ruleId":"339","severity":1,"message":"340","line":50,"column":28,"nodeType":"341","messageId":"342","endLine":50,"endColumn":31,"suggestions":"357"},{"ruleId":"339","severity":1,"message":"340","line":52,"column":18,"nodeType":"341","messageId":"342","endLine":52,"endColumn":21,"suggestions":"358"},{"ruleId":"339","severity":1,"message":"340","line":25,"column":41,"nodeType":"341","messageId":"342","endLine":25,"endColumn":44,"suggestions":"359"},{"ruleId":"339","severity":1,"message":"340","line":34,"column":28,"nodeType":"341","messageId":"342","endLine":34,"endColumn":31,"suggestions":"360"},{"ruleId":"339","severity":1,"message":"340","line":36,"column":18,"nodeType":"341","messageId":"342","endLine":36,"endColumn":21,"suggestions":"361"},{"ruleId":"339","severity":1,"message":"340","line":40,"column":28,"nodeType":"341","messageId":"342","endLine":40,"endColumn":31,"suggestions":"362"},{"ruleId":"339","severity":1,"message":"340","line":42,"column":18,"nodeType":"341","messageId":"342","endLine":42,"endColumn":21,"suggestions":"363"},{"ruleId":"335","severity":1,"message":"336","line":15,"column":30,"nodeType":"337","messageId":"338","endLine":15,"endColumn":35},{"ruleId":"339","severity":1,"message":"340","line":28,"column":41,"nodeType":"341","messageId":"342","endLine":28,"endColumn":44,"suggestions":"364"},{"ruleId":"339","severity":1,"message":"340","line":49,"column":28,"nodeType":"341","messageId":"342","endLine":49,"endColumn":31,"suggestions":"365"},{"ruleId":"339","severity":1,"message":"340","line":51,"column":18,"nodeType":"341","messageId":"342","endLine":51,"endColumn":21,"suggestions":"366"},{"ruleId":"335","severity":1,"message":"336","line":1,"column":25,"nodeType":"337","messageId":"338","endLine":1,"endColumn":41},{"ruleId":"335","severity":1,"message":"367","line":1,"column":26,"nodeType":"368","messageId":"369","endLine":1,"endColumn":37},{"ruleId":"335","severity":1,"message":"336","line":1,"column":27,"nodeType":"337","messageId":"338","endLine":1,"endColumn":45},{"ruleId":"335","severity":1,"message":"336","line":2,"column":25,"nodeType":"337","messageId":"338","endLine":2,"endColumn":43},{"ruleId":"335","severity":1,"message":"336","line":4,"column":26,"nodeType":"337","messageId":"338","endLine":4,"endColumn":44},{"ruleId":"335","severity":1,"message":"336","line":5,"column":34,"nodeType":"337","messageId":"338","endLine":5,"endColumn":69},{"ruleId":"335","severity":1,"message":"336","line":14,"column":41,"nodeType":"337","messageId":"338","endLine":14,"endColumn":46},{"ruleId":"339","severity":1,"message":"340","line":186,"column":21,"nodeType":"341","messageId":"342","endLine":186,"endColumn":24,"suggestions":"370"},{"ruleId":"339","severity":1,"message":"340","line":54,"column":46,"nodeType":"341","messageId":"342","endLine":54,"endColumn":49,"suggestions":"371"},{"ruleId":"339","severity":1,"message":"340","line":64,"column":55,"nodeType":"341","messageId":"342","endLine":64,"endColumn":58,"suggestions":"372"},{"ruleId":"339","severity":1,"message":"340","line":95,"column":25,"nodeType":"341","messageId":"342","endLine":95,"endColumn":28,"suggestions":"373"},{"ruleId":"339","severity":1,"message":"340","line":95,"column":39,"nodeType":"341","messageId":"342","endLine":95,"endColumn":42,"suggestions":"374"},{"ruleId":"339","severity":1,"message":"340","line":106,"column":25,"nodeType":"341","messageId":"342","endLine":106,"endColumn":28,"suggestions":"375"},{"ruleId":"339","severity":1,"message":"340","line":106,"column":39,"nodeType":"341","messageId":"342","endLine":106,"endColumn":42,"suggestions":"376"},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["377","378"],["379","380"],["381","382"],"FunctionExpression",["383","384"],["385","386"],["387","388"],["389","390"],["391","392"],["393","394"],["395","396"],["397","398"],["399","400"],["401","402"],["403","404"],["405","406"],["407","408"],["409","410"],["411","412"],["413","414"],["415","416"],["417","418"],["419","420"],["421","422"],"Argument 'onPerfEntry' should be typed.","Identifier","missingArgType",["423","424"],["425","426"],["427","428"],["429","430"],["431","432"],["433","434"],["435","436"],{"messageId":"437","fix":"438","desc":"439"},{"messageId":"440","fix":"441","desc":"442"},{"messageId":"437","fix":"443","desc":"439"},{"messageId":"440","fix":"444","desc":"442"},{"messageId":"437","fix":"445","desc":"439"},{"messageId":"440","fix":"446","desc":"442"},{"messageId":"437","fix":"447","desc":"439"},{"messageId":"440","fix":"448","desc":"442"},{"messageId":"437","fix":"449","desc":"439"},{"messageId":"440","fix":"450","desc":"442"},{"messageId":"437","fix":"451","desc":"439"},{"messageId":"440","fix":"452","desc":"442"},{"messageId":"437","fix":"453","desc":"439"},{"messageId":"440","fix":"454","desc":"442"},{"messageId":"437","fix":"455","desc":"439"},{"messageId":"440","fix":"456","desc":"442"},{"messageId":"437","fix":"457","desc":"439"},{"messageId":"440","fix":"458","desc":"442"},{"messageId":"437","fix":"459","desc":"439"},{"messageId":"440","fix":"460","desc":"442"},{"messageId":"437","fix":"461","desc":"439"},{"messageId":"440","fix":"462","desc":"442"},{"messageId":"437","fix":"463","desc":"439"},{"messageId":"440","fix":"464","desc":"442"},{"messageId":"437","fix":"465","desc":"439"},{"messageId":"440","fix":"466","desc":"442"},{"messageId":"437","fix":"467","desc":"439"},{"messageId":"440","fix":"468","desc":"442"},{"messageId":"437","fix":"469","desc":"439"},{"messageId":"440","fix":"470","desc":"442"},{"messageId":"437","fix":"471","desc":"439"},{"messageId":"440","fix":"472","desc":"442"},{"messageId":"437","fix":"473","desc":"439"},{"messageId":"440","fix":"474","desc":"442"},{"messageId":"437","fix":"475","desc":"439"},{"messageId":"440","fix":"476","desc":"442"},{"messageId":"437","fix":"477","desc":"439"},{"messageId":"440","fix":"478","desc":"442"},{"messageId":"437","fix":"479","desc":"439"},{"messageId":"440","fix":"480","desc":"442"},{"messageId":"437","fix":"481","desc":"439"},{"messageId":"440","fix":"482","desc":"442"},{"messageId":"437","fix":"483","desc":"439"},{"messageId":"440","fix":"484","desc":"442"},{"messageId":"437","fix":"485","desc":"439"},{"messageId":"440","fix":"486","desc":"442"},{"messageId":"437","fix":"487","desc":"439"},{"messageId":"440","fix":"488","desc":"442"},{"messageId":"437","fix":"489","desc":"439"},{"messageId":"440","fix":"490","desc":"442"},{"messageId":"437","fix":"491","desc":"439"},{"messageId":"440","fix":"492","desc":"442"},{"messageId":"437","fix":"493","desc":"439"},{"messageId":"440","fix":"494","desc":"442"},{"messageId":"437","fix":"495","desc":"439"},{"messageId":"440","fix":"496","desc":"442"},{"messageId":"437","fix":"497","desc":"439"},{"messageId":"440","fix":"498","desc":"442"},{"messageId":"437","fix":"499","desc":"439"},{"messageId":"440","fix":"500","desc":"442"},"suggestUnknown",{"range":"501","text":"502"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"501","text":"503"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"504","text":"502"},{"range":"504","text":"503"},{"range":"505","text":"502"},{"range":"505","text":"503"},{"range":"506","text":"502"},{"range":"506","text":"503"},{"range":"507","text":"502"},{"range":"507","text":"503"},{"range":"508","text":"502"},{"range":"508","text":"503"},{"range":"509","text":"502"},{"range":"509","text":"503"},{"range":"510","text":"502"},{"range":"510","text":"503"},{"range":"511","text":"502"},{"range":"511","text":"503"},{"range":"512","text":"502"},{"range":"512","text":"503"},{"range":"513","text":"502"},{"range":"513","text":"503"},{"range":"514","text":"502"},{"range":"514","text":"503"},{"range":"515","text":"502"},{"range":"515","text":"503"},{"range":"516","text":"502"},{"range":"516","text":"503"},{"range":"517","text":"502"},{"range":"517","text":"503"},{"range":"518","text":"502"},{"range":"518","text":"503"},{"range":"519","text":"502"},{"range":"519","text":"503"},{"range":"520","text":"502"},{"range":"520","text":"503"},{"range":"521","text":"502"},{"range":"521","text":"503"},{"range":"522","text":"502"},{"range":"522","text":"503"},{"range":"523","text":"502"},{"range":"523","text":"503"},{"range":"524","text":"502"},{"range":"524","text":"503"},{"range":"525","text":"502"},{"range":"525","text":"503"},{"range":"526","text":"502"},{"range":"526","text":"503"},{"range":"527","text":"502"},{"range":"527","text":"503"},{"range":"528","text":"502"},{"range":"528","text":"503"},{"range":"529","text":"502"},{"range":"529","text":"503"},{"range":"530","text":"502"},{"range":"530","text":"503"},{"range":"531","text":"502"},{"range":"531","text":"503"},{"range":"532","text":"502"},{"range":"532","text":"503"},[203,206],"unknown","never",[293,296],[557,560],[2230,2233],[3739,3742],[3798,3801],[1140,1143],[1815,1818],[1870,1873],[1346,1349],[2202,2205],[2257,2260],[1077,1080],[1990,1993],[2053,2056],[1141,1144],[1433,1436],[1496,1499],[1329,1332],[1401,1404],[1192,1195],[1885,1888],[1948,1951],[5475,5478],[2092,2095],[2694,2697],[3565,3568],[3579,3582],[3881,3884],[3895,3898]]